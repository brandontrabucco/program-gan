node {
  name: "input_producer/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "C:/Users/brand/Google Drive/Academic/Research/Program Synthesis with Deep Learning/Datasets/epf_5_dataset.csv"
      }
    }
  }
}
node {
  name: "input_producer/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "input_producer/Greater/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "input_producer/Greater"
  op: "Greater"
  input: "input_producer/Size"
  input: "input_producer/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "input_producer/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "string_input_producer requires a non-null input tensor"
      }
    }
  }
}
node {
  name: "input_producer/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "string_input_producer requires a non-null input tensor"
      }
    }
  }
}
node {
  name: "input_producer/Assert/Assert"
  op: "Assert"
  input: "input_producer/Greater"
  input: "input_producer/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "input_producer/Identity"
  op: "Identity"
  input: "input_producer/Const"
  input: "^input_producer/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "input_producer/RandomShuffle"
  op: "RandomShuffle"
  input: "input_producer/Identity"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "input_producer"
  op: "FIFOQueueV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "capacity"
    value {
      i: 32
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "input_producer/input_producer_EnqueueMany"
  op: "QueueEnqueueManyV2"
  input: "input_producer"
  input: "input_producer/RandomShuffle"
  attr {
    key: "Tcomponents"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "input_producer/input_producer_Close"
  op: "QueueCloseV2"
  input: "input_producer"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: false
    }
  }
}
node {
  name: "input_producer/input_producer_Close_1"
  op: "QueueCloseV2"
  input: "input_producer"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: true
    }
  }
}
node {
  name: "input_producer/input_producer_Size"
  op: "QueueSizeV2"
  input: "input_producer"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "input_producer/Cast"
  op: "Cast"
  input: "input_producer/input_producer_Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "input_producer/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03125
      }
    }
  }
}
node {
  name: "input_producer/mul"
  op: "Mul"
  input: "input_producer/Cast"
  input: "input_producer/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "input_producer/fraction_of_32_full/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "input_producer/fraction_of_32_full"
      }
    }
  }
}
node {
  name: "input_producer/fraction_of_32_full"
  op: "ScalarSummary"
  input: "input_producer/fraction_of_32_full/tags"
  input: "input_producer/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TextLineReaderV2"
  op: "TextLineReaderV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
  attr {
    key: "skip_header_lines"
    value {
      i: 1
    }
  }
}
node {
  name: "ReaderReadV2"
  op: "ReaderReadV2"
  input: "TextLineReaderV2"
  input: "input_producer"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_13"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_14"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_15"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_16"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_17"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_18"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_19"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_20"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV/record_defaults_21"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0"
      }
    }
  }
}
node {
  name: "DecodeCSV"
  op: "DecodeCSV"
  input: "ReaderReadV2:1"
  input: "DecodeCSV/record_defaults_0"
  input: "DecodeCSV/record_defaults_1"
  input: "DecodeCSV/record_defaults_2"
  input: "DecodeCSV/record_defaults_3"
  input: "DecodeCSV/record_defaults_4"
  input: "DecodeCSV/record_defaults_5"
  input: "DecodeCSV/record_defaults_6"
  input: "DecodeCSV/record_defaults_7"
  input: "DecodeCSV/record_defaults_8"
  input: "DecodeCSV/record_defaults_9"
  input: "DecodeCSV/record_defaults_10"
  input: "DecodeCSV/record_defaults_11"
  input: "DecodeCSV/record_defaults_12"
  input: "DecodeCSV/record_defaults_13"
  input: "DecodeCSV/record_defaults_14"
  input: "DecodeCSV/record_defaults_15"
  input: "DecodeCSV/record_defaults_16"
  input: "DecodeCSV/record_defaults_17"
  input: "DecodeCSV/record_defaults_18"
  input: "DecodeCSV/record_defaults_19"
  input: "DecodeCSV/record_defaults_20"
  input: "DecodeCSV/record_defaults_21"
  attr {
    key: "OUT_TYPE"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "field_delim"
    value {
      s: ","
    }
  }
  attr {
    key: "use_quote_delim"
    value {
      b: true
    }
  }
}
node {
  name: "stack"
  op: "Pack"
  input: "DecodeCSV:1"
  input: "DecodeCSV:2"
  input: "DecodeCSV:3"
  input: "DecodeCSV:4"
  input: "DecodeCSV:5"
  input: "DecodeCSV:6"
  input: "DecodeCSV:7"
  input: "DecodeCSV:8"
  input: "DecodeCSV:9"
  input: "DecodeCSV:10"
  input: "DecodeCSV:11"
  input: "DecodeCSV:12"
  input: "DecodeCSV:13"
  input: "DecodeCSV:14"
  input: "DecodeCSV:15"
  input: "DecodeCSV:16"
  input: "DecodeCSV:17"
  input: "DecodeCSV:18"
  input: "DecodeCSV:19"
  input: "DecodeCSV:20"
  attr {
    key: "N"
    value {
      i: 20
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "StringToNumber"
  op: "StringToNumber"
  input: "stack"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n\r\013\014"
      }
    }
  }
}
node {
  name: "StringSplit"
  op: "StringSplit"
  input: "Const_1"
  input: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "packed"
  op: "Pack"
  input: "DecodeCSV:21"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "StringSplit_1"
  op: "StringSplit"
  input: "packed"
  input: "Const_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "string_to_index/Size"
  op: "Size"
  input: "StringSplit:1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "string_to_index/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "string_to_index/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "string_to_index/range"
  op: "Range"
  input: "string_to_index/range/start"
  input: "string_to_index/Size"
  input: "string_to_index/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "string_to_index/ToInt64"
  op: "Cast"
  input: "string_to_index/range"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "string_to_index/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "string_to_index/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "string_to_index/hash_table/table_init"
  op: "InitializeTableV2"
  input: "string_to_index/hash_table"
  input: "StringSplit:1"
  input: "string_to_index/ToInt64"
  attr {
    key: "Tkey"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tval"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "hash_table_Lookup"
  op: "LookupTableFindV2"
  input: "string_to_index/hash_table"
  input: "StringSplit_1:1"
  input: "string_to_index/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "one_hot/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "one_hot/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "one_hot"
  op: "OneHot"
  input: "hash_table_Lookup"
  input: "one_hot/depth"
  input: "one_hot/on_value"
  input: "one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "Size"
  op: "Size"
  input: "one_hot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "floordiv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "floordiv"
  op: "FloorDiv"
  input: "Size"
  input: "floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "sub/x"
  input: "floordiv"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Pad/paddings/0/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Pad/paddings/0"
  op: "Pack"
  input: "Pad/paddings/0/0"
  input: "sub"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Pad/paddings/1_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Pad/paddings"
  op: "Pack"
  input: "Pad/paddings/0"
  input: "Pad/paddings/1_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Pad"
  op: "Pad"
  input: "one_hot"
  input: "Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "Pad"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "shuffle_batch/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "shuffle_batch/random_shuffle_queue"
  op: "RandomShuffleQueueV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "capacity"
    value {
      i: 9330
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_STRING
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "min_after_dequeue"
    value {
      i: 9
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
  attr {
    key: "shapes"
    value {
      list {
        shape {
        }
        shape {
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "shuffle_batch/random_shuffle_queue_enqueue"
  op: "QueueEnqueueV2"
  input: "shuffle_batch/random_shuffle_queue"
  input: "DecodeCSV"
  input: "StringToNumber"
  input: "Reshape"
  input: "floordiv"
  attr {
    key: "Tcomponents"
    value {
      list {
        type: DT_STRING
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "shuffle_batch/random_shuffle_queue_Close"
  op: "QueueCloseV2"
  input: "shuffle_batch/random_shuffle_queue"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: false
    }
  }
}
node {
  name: "shuffle_batch/random_shuffle_queue_Close_1"
  op: "QueueCloseV2"
  input: "shuffle_batch/random_shuffle_queue"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: true
    }
  }
}
node {
  name: "shuffle_batch/random_shuffle_queue_Size"
  op: "QueueSizeV2"
  input: "shuffle_batch/random_shuffle_queue"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "shuffle_batch/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "shuffle_batch/sub"
  op: "Sub"
  input: "shuffle_batch/random_shuffle_queue_Size"
  input: "shuffle_batch/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "shuffle_batch/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "shuffle_batch/Maximum"
  op: "Maximum"
  input: "shuffle_batch/Maximum/x"
  input: "shuffle_batch/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "shuffle_batch/Cast"
  op: "Cast"
  input: "shuffle_batch/Maximum"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "shuffle_batch/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00010728462802944705
      }
    }
  }
}
node {
  name: "shuffle_batch/mul"
  op: "Mul"
  input: "shuffle_batch/Cast"
  input: "shuffle_batch/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "shuffle_batch/fraction_over_9_of_9321_full/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "shuffle_batch/fraction_over_9_of_9321_full"
      }
    }
  }
}
node {
  name: "shuffle_batch/fraction_over_9_of_9321_full"
  op: "ScalarSummary"
  input: "shuffle_batch/fraction_over_9_of_9321_full/tags"
  input: "shuffle_batch/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "shuffle_batch/n"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "shuffle_batch"
  op: "QueueDequeueManyV2"
  input: "shuffle_batch/random_shuffle_queue"
  input: "shuffle_batch/n"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_STRING
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "random_uniform/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "random_uniform"
  op: "RandomUniformInt"
  input: "random_uniform/shape"
  input: "random_uniform/min"
  input: "random_uniform/max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
        tensor_contentt\000\000\000\t\000\000\000\t\000\000\000\t\000\000\000\t\000\000\000\t\000\000\000\t\000\000\000\t\000\000\000\t\000\000\000\t\000\000\000\n\000\000\000\n\000\000\000\n\000\000\000\n\000\000\000\n\000\000\000\n\000\000\000\n\000\000\000\n\000\000\000\n\000\000\000\n\000\000\000\013\000\000\000\013\000\000\000\013\000\000\000\013\000\000\000\013\000\000\000\013\000\000\000\013\000\000\000\013\000\000\000\013\000\000\000\013\000\000\000\014\000\000\000\014\000\000\000\014\000\000\000\014\000\000\000\014\000\000\000\014\000\000\000\014\000\000\000\014\000\000\000\014\000\000\000\014\000\000\000\r\000\000\000\r\000\000\000\r\000\000\000\r\000\000\000\r\000\000\000\r\000\000\000\r\000\000\000\r\000\000\000\r\000\000\000\r\000\000\000\016\000\000\000\016\000\000\000\016\000\000\000\016\000\000\000\016\000\000\000\016\000\000\000\016\000\000\000\016\000\000\000\016\000\000\000\016\000\000\000\017\000\000\000\017\000\000\000\017\000\000\000\017\000\000\000\017\000\000\000\017\000\000\000\017\000\000\000\017\000\000\000\017\000\000\000\017\000\000\000\020\000\000\000\020\000\000\000\020\000\000\000\020\000\000\000\020\000\000\000\020\000\000\000\020\000\000\000\020\000\000\000\020\000\000\000\020\000\000\000\021\000\000\000\021\000\000\000\021\000\000\000\021\000\000\000\021\000\000\000\021\000\000\000\021\000\000\000\021\000\000\000\021\000\000\000\021\000\000\000\022\000\000\000\022\000\000\000\022\000\000\000\022\000\000\000\022\000\000\000\022\000\000\000\022\000\000\000\022\000\000\000\022\000\000\000\022\000\000\000\023\000\000\000\023\000\000\000\023\000\000\000\023\000\000\000\023\000\000\000\023\000\000\000\023\000\000\000\023\000\000\000\023\000\000\000\023\000\000\000\024\000\000\000\024\000\000\000\024\000\000\000\024\000\000\000\024\000\000\000\024\000\000\000\024\000\000\000\024\000\000\000\024\000\000\000\024\000\000\000\025\000\000\000\025\000\000\000\025\000\000\000\025\000\000\000\025\000\000\000\025\000\000\000\025\000\000\000\025\000\000\000\025\000\000\000\025\000\000\000\026\000\000\000\026\000\000\000\026\000\000\000\026\000\000\000\026\000\000\000\026\000\000\000\026\000\000\000\026\000\000\000\026\000\000\000\026\000\000\000\027\000\000\000\027\000\000\000\027\000\000\000\027\000\000\000\027\000\000\000\027\000\000\000\027\000\000\000\027\000\000\000\027\000\000\000\027\000\000\000\030\000\000\000\030\000\000\000\030\000\000\000\030\000\000\000\030\000\000\000\030\000\000\000\030\000\000\000\030\000\000\000\030\000\000\000\030\000\000\000\031\000\000\000\031\000\000\000\031\000\000\000\031\000\000\000\031\000\000\000\031\000\000\000\031\000\000\000\031\000\000\000\031\000\000\000\031\000\000\000\032\000\000\000\032\000\000\000\032\000\000\000\032\000\000\000\032\000\000\000\032\000\000\000\032\000\000\000\032\000\000\000\032\000\000\000\032\000\000\000\033\000\000\000\033\000\000\000\033\000\000\000\033\000\000\000\033\000\000\000\033\000\000\000\033\000\000\000\033\000\000\000\033\000\000\000\033\000\000\000\034\000\000\000\034\000\000\000\034\000\000\000\034\000\000\000\034\000\000\000\034\000\000\000\034\000\000\000\034\000\000\000\034\000\000\000\034\000\000\000\035\000\000\000\035\000\000\000\035\000\000\000\035\000\000\000\035\000\000\000\035\000\000\000\035\000\000\000\035\000\000\000\035\000\000\000\035\000\000\000\036\000\000\000\036\000\000\000\036\000\000\000\036\000\000\000\036\000\000\000\036\000\000\000\036\000\000\000\036\000\000\000\036\000\000\000\036\000\000\000\037\000\000\000\037\000\000\000\037\000\000\000\037\000\000\000\037\000\000\000\037\000\000\000\037\000\000\000\037\000\000\000\037\000\000\000\037\000\000\000"
      }
    }
  }
}
node {
  name: "random_uniform_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: " \000\000\000\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "random_uniform_1/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "random_uniform_1/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "random_uniform_1"
  op: "RandomUniformInt"
  input: "random_uniform_1/shape"
  input: "random_uniform_1/min"
  input: "random_uniform_1/max"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "Const_3"
  input: "random_uniform_1"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 10
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "one_hot_1/on_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "one_hot_1/off_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "one_hot_1/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "one_hot_1"
  op: "OneHot"
  input: "random_uniform"
  input: "one_hot_1/depth"
  input: "one_hot_1/on_value"
  input: "one_hot_1/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 10
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Variable"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 64
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Variable/Assign"
  op: "Assign"
  input: "Variable"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Variable/read"
  op: "Identity"
  input: "Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "Variable"
  input: "shuffle_batch:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ScatterNdUpdate"
  op: "ScatterNdUpdate"
  input: "Assign"
  input: "concat"
  input: "one_hot_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "syntax_1/LSTMCellZeroState/Const"
  input: "syntax_1/LSTMCellZeroState/Const_1"
  input: "syntax_1/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "syntax_1/LSTMCellZeroState/concat"
  input: "syntax_1/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "syntax_1/LSTMCellZeroState/Const_4"
  input: "syntax_1/LSTMCellZeroState/Const_5"
  input: "syntax_1/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "syntax_1/LSTMCellZeroState/concat_1"
  input: "syntax_1/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState_1/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState_1/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState_1/concat"
  op: "ConcatV2"
  input: "syntax_1/LSTMCellZeroState_1/Const"
  input: "syntax_1/LSTMCellZeroState_1/Const_1"
  input: "syntax_1/LSTMCellZeroState_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState_1/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState_1/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState_1/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState_1/zeros"
  op: "Fill"
  input: "syntax_1/LSTMCellZeroState_1/concat"
  input: "syntax_1/LSTMCellZeroState_1/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState_1/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState_1/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState_1/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState_1/concat_1"
  op: "ConcatV2"
  input: "syntax_1/LSTMCellZeroState_1/Const_4"
  input: "syntax_1/LSTMCellZeroState_1/Const_5"
  input: "syntax_1/LSTMCellZeroState_1/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState_1/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState_1/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState_1/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1/LSTMCellZeroState_1/zeros_1"
  op: "Fill"
  input: "syntax_1/LSTMCellZeroState_1/concat_1"
  input: "syntax_1/LSTMCellZeroState_1/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/range"
  op: "Range"
  input: "syntax_1/bidirectional_rnn/fw/range/start"
  input: "syntax_1/bidirectional_rnn/fw/Rank"
  input: "syntax_1/bidirectional_rnn/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/concat"
  op: "ConcatV2"
  input: "syntax_1/bidirectional_rnn/fw/concat/values_0"
  input: "syntax_1/bidirectional_rnn/fw/range"
  input: "syntax_1/bidirectional_rnn/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/transpose"
  op: "Transpose"
  input: "shuffle_batch:2"
  input: "syntax_1/bidirectional_rnn/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/sequence_length"
  op: "Identity"
  input: "shuffle_batch:3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Equal"
  op: "Equal"
  input: "syntax_1/bidirectional_rnn/fw/fw/Shape"
  input: "syntax_1/bidirectional_rnn/fw/fw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/All"
  op: "All"
  input: "syntax_1/bidirectional_rnn/fw/fw/Equal"
  input: "syntax_1/bidirectional_rnn/fw/fw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor syntax_1/bidirectional_rnn/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor syntax_1/bidirectional_rnn/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Assert/Assert"
  op: "Assert"
  input: "syntax_1/bidirectional_rnn/fw/fw/All"
  input: "syntax_1/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  input: "syntax_1/bidirectional_rnn/fw/fw/stack"
  input: "syntax_1/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  input: "syntax_1/bidirectional_rnn/fw/fw/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/CheckSeqLen"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/fw/sequence_length"
  input: "^syntax_1/bidirectional_rnn/fw/fw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "@\000\000\000 \000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "syntax_1/bidirectional_rnn/fw/fw/Shape_1"
  input: "syntax_1/bidirectional_rnn/fw/fw/strided_slice/stack"
  input: "syntax_1/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  input: "syntax_1/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/concat"
  op: "ConcatV2"
  input: "syntax_1/bidirectional_rnn/fw/fw/Const_1"
  input: "syntax_1/bidirectional_rnn/fw/fw/Const_2"
  input: "syntax_1/bidirectional_rnn/fw/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/zeros"
  op: "Fill"
  input: "syntax_1/bidirectional_rnn/fw/fw/concat"
  input: "syntax_1/bidirectional_rnn/fw/fw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Min"
  op: "Min"
  input: "syntax_1/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "syntax_1/bidirectional_rnn/fw/fw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Max"
  op: "Max"
  input: "syntax_1/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "syntax_1/bidirectional_rnn/fw/fw/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "syntax_1/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "syntax_1/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "@\000\000\000 \000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "syntax_1/bidirectional_rnn/fw/transpose"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/fw/fw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Enter_1"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Enter_2"
  op: "Enter"
  input: "syntax_1/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Enter_3"
  op: "Enter"
  input: "syntax_1/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Merge"
  op: "Merge"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Enter"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Merge_1"
  op: "Merge"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Enter_1"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Merge_2"
  op: "Merge"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Enter_2"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Merge_3"
  op: "Merge"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Enter_3"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Less"
  op: "Less"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Merge"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Switch"
  op: "Switch"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Merge"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Switch_1"
  op: "Switch"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Switch_2"
  op: "Switch"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Merge_2"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Switch_3"
  op: "Switch"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Merge_3"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Identity"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Identity_1"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Identity_2"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Identity_3"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ",\001\000\000 \003\000\000"
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07385489344596863
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07385489344596863
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
        dim {
          size: 800
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/read"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
  op: "Const"
  input: "^syntax_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat"
  op: "ConcatV2"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul"
  op: "MatMul"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 800
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Assign"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/read"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Const"
  op: "Const"
  input: "^syntax_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split/split_dim"
  op: "Const"
  input: "^syntax_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split"
  op: "Split"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split/split_dim"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add/y"
  op: "Const"
  input: "^syntax_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add"
  op: "Add"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split:2"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul"
  op: "Mul"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh"
  op: "Tanh"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1"
  op: "Mul"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1"
  op: "Add"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
  op: "Mul"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/fw/fw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Select/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/fw/fw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Select"
  op: "Select"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Select/Enter"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual_1"
  op: "GreaterEqual"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Select_1"
  op: "Select"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual_1"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Identity_2"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual_2"
  op: "GreaterEqual"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Select_2"
  op: "Select"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual_2"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Select"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/add/y"
  op: "Const"
  input: "^syntax_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/add"
  op: "Add"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Exit"
  op: "Exit"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Exit_1"
  op: "Exit"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Exit_2"
  op: "Exit"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/while/Exit_3"
  op: "Exit"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArray"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArray"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 200
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/range"
  op: "Range"
  input: "syntax_1/bidirectional_rnn/fw/fw/range/start"
  input: "syntax_1/bidirectional_rnn/fw/fw/Rank"
  input: "syntax_1/bidirectional_rnn/fw/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/concat_1/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/concat_1"
  op: "ConcatV2"
  input: "syntax_1/bidirectional_rnn/fw/fw/concat_1/values_0"
  input: "syntax_1/bidirectional_rnn/fw/fw/range"
  input: "syntax_1/bidirectional_rnn/fw/fw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/fw/transpose"
  op: "Transpose"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "syntax_1/bidirectional_rnn/fw/fw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/ReverseSequence"
  op: "ReverseSequence"
  input: "shuffle_batch:2"
  input: "shuffle_batch:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/range"
  op: "Range"
  input: "syntax_1/bidirectional_rnn/bw/range/start"
  input: "syntax_1/bidirectional_rnn/bw/Rank"
  input: "syntax_1/bidirectional_rnn/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/concat"
  op: "ConcatV2"
  input: "syntax_1/bidirectional_rnn/bw/concat/values_0"
  input: "syntax_1/bidirectional_rnn/bw/range"
  input: "syntax_1/bidirectional_rnn/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/transpose"
  op: "Transpose"
  input: "syntax_1/bidirectional_rnn/bw/ReverseSequence"
  input: "syntax_1/bidirectional_rnn/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/sequence_length"
  op: "Identity"
  input: "shuffle_batch:3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Equal"
  op: "Equal"
  input: "syntax_1/bidirectional_rnn/bw/bw/Shape"
  input: "syntax_1/bidirectional_rnn/bw/bw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/All"
  op: "All"
  input: "syntax_1/bidirectional_rnn/bw/bw/Equal"
  input: "syntax_1/bidirectional_rnn/bw/bw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor syntax_1/bidirectional_rnn/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor syntax_1/bidirectional_rnn/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Assert/Assert"
  op: "Assert"
  input: "syntax_1/bidirectional_rnn/bw/bw/All"
  input: "syntax_1/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  input: "syntax_1/bidirectional_rnn/bw/bw/stack"
  input: "syntax_1/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  input: "syntax_1/bidirectional_rnn/bw/bw/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/CheckSeqLen"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/bw/sequence_length"
  input: "^syntax_1/bidirectional_rnn/bw/bw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "@\000\000\000 \000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "syntax_1/bidirectional_rnn/bw/bw/Shape_1"
  input: "syntax_1/bidirectional_rnn/bw/bw/strided_slice/stack"
  input: "syntax_1/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  input: "syntax_1/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/concat"
  op: "ConcatV2"
  input: "syntax_1/bidirectional_rnn/bw/bw/Const_1"
  input: "syntax_1/bidirectional_rnn/bw/bw/Const_2"
  input: "syntax_1/bidirectional_rnn/bw/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/zeros"
  op: "Fill"
  input: "syntax_1/bidirectional_rnn/bw/bw/concat"
  input: "syntax_1/bidirectional_rnn/bw/bw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Min"
  op: "Min"
  input: "syntax_1/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "syntax_1/bidirectional_rnn/bw/bw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Max"
  op: "Max"
  input: "syntax_1/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "syntax_1/bidirectional_rnn/bw/bw/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "syntax_1/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "syntax_1/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "@\000\000\000 \000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "syntax_1/bidirectional_rnn/bw/transpose"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/bw/bw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Enter_1"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Enter_2"
  op: "Enter"
  input: "syntax_1/LSTMCellZeroState_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Enter_3"
  op: "Enter"
  input: "syntax_1/LSTMCellZeroState_1/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Merge"
  op: "Merge"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Enter"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Merge_1"
  op: "Merge"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Enter_1"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Merge_2"
  op: "Merge"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Enter_2"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Merge_3"
  op: "Merge"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Enter_3"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Less"
  op: "Less"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Merge"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Switch"
  op: "Switch"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Merge"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Switch_1"
  op: "Switch"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Switch_2"
  op: "Switch"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Merge_2"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Switch_3"
  op: "Switch"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Merge_3"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Identity"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Identity_1"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Identity_2"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Identity_3"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ",\001\000\000 \003\000\000"
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07385489344596863
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07385489344596863
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
        dim {
          size: 800
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/read"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
  op: "Const"
  input: "^syntax_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat"
  op: "ConcatV2"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul"
  op: "MatMul"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 800
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Assign"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/read"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Const"
  op: "Const"
  input: "^syntax_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split/split_dim"
  op: "Const"
  input: "^syntax_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split"
  op: "Split"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split/split_dim"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add/y"
  op: "Const"
  input: "^syntax_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add"
  op: "Add"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split:2"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul"
  op: "Mul"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh"
  op: "Tanh"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1"
  op: "Mul"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1"
  op: "Add"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
  op: "Mul"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/bw/bw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Select/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/bw/bw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Select"
  op: "Select"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Select/Enter"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual_1"
  op: "GreaterEqual"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Select_1"
  op: "Select"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual_1"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Identity_2"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual_2"
  op: "GreaterEqual"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Select_2"
  op: "Select"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual_2"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Select"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/add/y"
  op: "Const"
  input: "^syntax_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/add"
  op: "Add"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Exit"
  op: "Exit"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Exit_1"
  op: "Exit"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Exit_2"
  op: "Exit"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/while/Exit_3"
  op: "Exit"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArray"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArray"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 200
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/range"
  op: "Range"
  input: "syntax_1/bidirectional_rnn/bw/bw/range/start"
  input: "syntax_1/bidirectional_rnn/bw/bw/Rank"
  input: "syntax_1/bidirectional_rnn/bw/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/concat_1/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/concat_1"
  op: "ConcatV2"
  input: "syntax_1/bidirectional_rnn/bw/bw/concat_1/values_0"
  input: "syntax_1/bidirectional_rnn/bw/bw/range"
  input: "syntax_1/bidirectional_rnn/bw/bw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/bw/transpose"
  op: "Transpose"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "syntax_1/bidirectional_rnn/bw/bw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/ReverseSequence"
  op: "ReverseSequence"
  input: "syntax_1/bidirectional_rnn/bw/bw/transpose"
  input: "shuffle_batch:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "syntax_2/syntax_2_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "syntax_2/syntax_2_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_2/syntax_2_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "syntax_2/syntax_2_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "syntax_2/syntax_2_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "syntax_2/syntax_2_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "syntax_2/syntax_2_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "syntax_2/syntax_2_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/syntax_2_weights/Initializer/truncated_normal"
  op: "Add"
  input: "syntax_2/syntax_2_weights/Initializer/truncated_normal/mul"
  input: "syntax_2/syntax_2_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/syntax_2_weights"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_2/syntax_2_weights/Assign"
  op: "Assign"
  input: "syntax_2/syntax_2_weights"
  input: "syntax_2/syntax_2_weights/Initializer/truncated_normal"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_2/syntax_2_weights/read"
  op: "Identity"
  input: "syntax_2/syntax_2_weights"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/syntax_2_biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "syntax_2/syntax_2_biases"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_2/syntax_2_biases/Assign"
  op: "Assign"
  input: "syntax_2/syntax_2_biases"
  input: "syntax_2/syntax_2_biases/Initializer/Const"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_2/syntax_2_biases/read"
  op: "Identity"
  input: "syntax_2/syntax_2_biases"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "syntax_2/concat"
  op: "ConcatV2"
  input: "syntax_1/bidirectional_rnn/fw/fw/transpose"
  input: "syntax_1/ReverseSequence"
  input: "syntax_2/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/range/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/range"
  op: "Range"
  input: "syntax_2/Tensordot/range/start"
  input: "syntax_2/Tensordot/range/limit"
  input: "syntax_2/Tensordot/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/range_1/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/range_1"
  op: "Range"
  input: "syntax_2/Tensordot/range_1/start"
  input: "syntax_2/Tensordot/range_1/limit"
  input: "syntax_2/Tensordot/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: " \000\000\000@\000\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/GreaterEqual"
  op: "GreaterEqual"
  input: "syntax_2/Tensordot/range"
  input: "syntax_2/Tensordot/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Cast"
  op: "Cast"
  input: "syntax_2/Tensordot/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/mul"
  op: "Mul"
  input: "syntax_2/Tensordot/Cast"
  input: "syntax_2/Tensordot/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Less"
  op: "Less"
  input: "syntax_2/Tensordot/range"
  input: "syntax_2/Tensordot/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Cast_1"
  op: "Cast"
  input: "syntax_2/Tensordot/Less"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/add"
  op: "Add"
  input: "syntax_2/Tensordot/range"
  input: "syntax_2/Tensordot/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/mul_1"
  op: "Mul"
  input: "syntax_2/Tensordot/Cast_1"
  input: "syntax_2/Tensordot/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/add_1"
  op: "Add"
  input: "syntax_2/Tensordot/mul"
  input: "syntax_2/Tensordot/mul_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/range_2/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/range_2/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/range_2"
  op: "Range"
  input: "syntax_2/Tensordot/range_2/start"
  input: "syntax_2/Tensordot/Rank"
  input: "syntax_2/Tensordot/range_2/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/ListDiff"
  op: "ListDiff"
  input: "syntax_2/Tensordot/range_2"
  input: "syntax_2/Tensordot/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "syntax_2/Tensordot/Gather"
  op: "Gather"
  input: "syntax_2/Tensordot/Shape"
  input: "syntax_2/Tensordot/ListDiff"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_2/Tensordot/Gather_1"
  op: "Gather"
  input: "syntax_2/Tensordot/Shape"
  input: "syntax_2/Tensordot/add_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_2/Tensordot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Prod"
  op: "Prod"
  input: "syntax_2/Tensordot/Gather"
  input: "syntax_2/Tensordot/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_2/Tensordot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Prod_1"
  op: "Prod"
  input: "syntax_2/Tensordot/Gather_1"
  input: "syntax_2/Tensordot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_2/Tensordot/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/concat"
  op: "ConcatV2"
  input: "syntax_2/Tensordot/Gather_1"
  input: "syntax_2/Tensordot/Gather"
  input: "syntax_2/Tensordot/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/concat_1"
  op: "ConcatV2"
  input: "syntax_2/Tensordot/ListDiff"
  input: "syntax_2/Tensordot/add_1"
  input: "syntax_2/Tensordot/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/stack"
  op: "Pack"
  input: "syntax_2/Tensordot/Prod"
  input: "syntax_2/Tensordot/Prod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "syntax_2/Tensordot/transpose"
  op: "Transpose"
  input: "syntax_2/concat"
  input: "syntax_2/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Reshape"
  op: "Reshape"
  input: "syntax_2/Tensordot/transpose"
  input: "syntax_2/Tensordot/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/GreaterEqual_1"
  op: "GreaterEqual"
  input: "syntax_2/Tensordot/range_1"
  input: "syntax_2/Tensordot/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Cast_2"
  op: "Cast"
  input: "syntax_2/Tensordot/GreaterEqual_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/mul_2"
  op: "Mul"
  input: "syntax_2/Tensordot/Cast_2"
  input: "syntax_2/Tensordot/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Less_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Less_1"
  op: "Less"
  input: "syntax_2/Tensordot/range_1"
  input: "syntax_2/Tensordot/Less_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Cast_3"
  op: "Cast"
  input: "syntax_2/Tensordot/Less_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/add_2"
  op: "Add"
  input: "syntax_2/Tensordot/range_1"
  input: "syntax_2/Tensordot/Rank_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/mul_3"
  op: "Mul"
  input: "syntax_2/Tensordot/Cast_3"
  input: "syntax_2/Tensordot/add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/add_3"
  op: "Add"
  input: "syntax_2/Tensordot/mul_2"
  input: "syntax_2/Tensordot/mul_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/range_3/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/range_3/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/range_3"
  op: "Range"
  input: "syntax_2/Tensordot/range_3/start"
  input: "syntax_2/Tensordot/Rank_1"
  input: "syntax_2/Tensordot/range_3/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/ListDiff_1"
  op: "ListDiff"
  input: "syntax_2/Tensordot/range_3"
  input: "syntax_2/Tensordot/add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "syntax_2/Tensordot/Gather_2"
  op: "Gather"
  input: "syntax_2/Tensordot/Shape_1"
  input: "syntax_2/Tensordot/ListDiff_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_2/Tensordot/Gather_3"
  op: "Gather"
  input: "syntax_2/Tensordot/Shape_1"
  input: "syntax_2/Tensordot/add_3"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_2/Tensordot/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Prod_2"
  op: "Prod"
  input: "syntax_2/Tensordot/Gather_2"
  input: "syntax_2/Tensordot/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_2/Tensordot/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Prod_3"
  op: "Prod"
  input: "syntax_2/Tensordot/Gather_3"
  input: "syntax_2/Tensordot/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_2/Tensordot/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/concat_2"
  op: "ConcatV2"
  input: "syntax_2/Tensordot/Gather_3"
  input: "syntax_2/Tensordot/Gather_2"
  input: "syntax_2/Tensordot/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/concat_3/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/concat_3"
  op: "ConcatV2"
  input: "syntax_2/Tensordot/add_3"
  input: "syntax_2/Tensordot/ListDiff_1"
  input: "syntax_2/Tensordot/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/stack_1"
  op: "Pack"
  input: "syntax_2/Tensordot/Prod_3"
  input: "syntax_2/Tensordot/Prod_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "syntax_2/Tensordot/transpose_1"
  op: "Transpose"
  input: "syntax_2/syntax_2_weights/read"
  input: "syntax_2/Tensordot/concat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/Reshape_1"
  op: "Reshape"
  input: "syntax_2/Tensordot/transpose_1"
  input: "syntax_2/Tensordot/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/MatMul"
  op: "MatMul"
  input: "syntax_2/Tensordot/Reshape"
  input: "syntax_2/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_2/Tensordot/concat_4/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot/concat_4"
  op: "ConcatV2"
  input: "syntax_2/Tensordot/Gather"
  input: "syntax_2/Tensordot/Gather_2"
  input: "syntax_2/Tensordot/concat_4/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/Tensordot"
  op: "Reshape"
  input: "syntax_2/Tensordot/MatMul"
  input: "syntax_2/Tensordot/concat_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "syntax_2/Add"
  op: "Add"
  input: "syntax_2/Tensordot"
  input: "syntax_2/syntax_2_biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "syntax_1_1/LSTMCellZeroState/Const"
  input: "syntax_1_1/LSTMCellZeroState/Const_1"
  input: "syntax_1_1/LSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "syntax_1_1/LSTMCellZeroState/concat"
  input: "syntax_1_1/LSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "syntax_1_1/LSTMCellZeroState/Const_4"
  input: "syntax_1_1/LSTMCellZeroState/Const_5"
  input: "syntax_1_1/LSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "syntax_1_1/LSTMCellZeroState/concat_1"
  input: "syntax_1_1/LSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState_1/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState_1/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState_1/concat"
  op: "ConcatV2"
  input: "syntax_1_1/LSTMCellZeroState_1/Const"
  input: "syntax_1_1/LSTMCellZeroState_1/Const_1"
  input: "syntax_1_1/LSTMCellZeroState_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState_1/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState_1/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState_1/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState_1/zeros"
  op: "Fill"
  input: "syntax_1_1/LSTMCellZeroState_1/concat"
  input: "syntax_1_1/LSTMCellZeroState_1/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState_1/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState_1/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState_1/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState_1/concat_1"
  op: "ConcatV2"
  input: "syntax_1_1/LSTMCellZeroState_1/Const_4"
  input: "syntax_1_1/LSTMCellZeroState_1/Const_5"
  input: "syntax_1_1/LSTMCellZeroState_1/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState_1/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState_1/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState_1/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1_1/LSTMCellZeroState_1/zeros_1"
  op: "Fill"
  input: "syntax_1_1/LSTMCellZeroState_1/concat_1"
  input: "syntax_1_1/LSTMCellZeroState_1/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/range"
  op: "Range"
  input: "syntax_1_1/bidirectional_rnn/fw/range/start"
  input: "syntax_1_1/bidirectional_rnn/fw/Rank"
  input: "syntax_1_1/bidirectional_rnn/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/concat"
  op: "ConcatV2"
  input: "syntax_1_1/bidirectional_rnn/fw/concat/values_0"
  input: "syntax_1_1/bidirectional_rnn/fw/range"
  input: "syntax_1_1/bidirectional_rnn/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/transpose"
  op: "Transpose"
  input: "ScatterNdUpdate"
  input: "syntax_1_1/bidirectional_rnn/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/sequence_length"
  op: "Identity"
  input: "shuffle_batch:3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Equal"
  op: "Equal"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/Shape"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/All"
  op: "All"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/Equal"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor syntax_1_1/bidirectional_rnn/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor syntax_1_1/bidirectional_rnn/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Assert/Assert"
  op: "Assert"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/All"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/stack"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/CheckSeqLen"
  op: "Identity"
  input: "syntax_1_1/bidirectional_rnn/fw/sequence_length"
  input: "^syntax_1_1/bidirectional_rnn/fw/fw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "@\000\000\000 \000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/Shape_1"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/strided_slice/stack"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/concat"
  op: "ConcatV2"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/Const_1"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/Const_2"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/zeros"
  op: "Fill"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/concat"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Min"
  op: "Min"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Max"
  op: "Max"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "@\000\000\000 \000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "syntax_1_1/bidirectional_rnn/fw/transpose"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Enter"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Enter_1"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Enter_2"
  op: "Enter"
  input: "syntax_1_1/LSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Enter_3"
  op: "Enter"
  input: "syntax_1_1/LSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Merge"
  op: "Merge"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Enter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_1"
  op: "Merge"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Enter_1"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_2"
  op: "Merge"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Enter_2"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_3"
  op: "Merge"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Enter_3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Less"
  op: "Less"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Merge"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Switch"
  op: "Switch"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Merge"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_1"
  op: "Switch"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_2"
  op: "Switch"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_2"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_3"
  op: "Switch"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
  op: "Identity"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Identity_1"
  op: "Identity"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Identity_2"
  op: "Identity"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Identity_3"
  op: "Identity"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
  op: "Const"
  input: "^syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat"
  op: "ConcatV2"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul"
  op: "MatMul"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Const"
  op: "Const"
  input: "^syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split/split_dim"
  op: "Const"
  input: "^syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split"
  op: "Split"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split/split_dim"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add/y"
  op: "Const"
  input: "^syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add"
  op: "Add"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split:2"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul"
  op: "Mul"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh"
  op: "Tanh"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1"
  op: "Mul"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1"
  op: "Add"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
  op: "Mul"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Select/Enter"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Select"
  op: "Select"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Select/Enter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual_1"
  op: "GreaterEqual"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1"
  op: "Select"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual_1"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Identity_2"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual_2"
  op: "GreaterEqual"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2"
  op: "Select"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual_2"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Select"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/add/y"
  op: "Const"
  input: "^syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/add"
  op: "Add"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Exit"
  op: "Exit"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Exit_1"
  op: "Exit"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Exit_2"
  op: "Exit"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/while/Exit_3"
  op: "Exit"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArray"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArray"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 200
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/range"
  op: "Range"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/range/start"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/Rank"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/concat_1/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/concat_1"
  op: "ConcatV2"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/concat_1/values_0"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/range"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/fw/fw/transpose"
  op: "Transpose"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/ReverseSequence"
  op: "ReverseSequence"
  input: "ScatterNdUpdate"
  input: "shuffle_batch:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/range"
  op: "Range"
  input: "syntax_1_1/bidirectional_rnn/bw/range/start"
  input: "syntax_1_1/bidirectional_rnn/bw/Rank"
  input: "syntax_1_1/bidirectional_rnn/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/concat/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/concat"
  op: "ConcatV2"
  input: "syntax_1_1/bidirectional_rnn/bw/concat/values_0"
  input: "syntax_1_1/bidirectional_rnn/bw/range"
  input: "syntax_1_1/bidirectional_rnn/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/transpose"
  op: "Transpose"
  input: "syntax_1_1/bidirectional_rnn/bw/ReverseSequence"
  input: "syntax_1_1/bidirectional_rnn/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/sequence_length"
  op: "Identity"
  input: "shuffle_batch:3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Equal"
  op: "Equal"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/Shape"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/All"
  op: "All"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/Equal"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor syntax_1_1/bidirectional_rnn/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor syntax_1_1/bidirectional_rnn/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Assert/Assert"
  op: "Assert"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/All"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/stack"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/CheckSeqLen"
  op: "Identity"
  input: "syntax_1_1/bidirectional_rnn/bw/sequence_length"
  input: "^syntax_1_1/bidirectional_rnn/bw/bw/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "@\000\000\000 \000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/Shape_1"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/strided_slice/stack"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/concat"
  op: "ConcatV2"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/Const_1"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/Const_2"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/zeros"
  op: "Fill"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/concat"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Min"
  op: "Min"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Max"
  op: "Max"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/time"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "@\000\000\000 \000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "syntax_1_1/bidirectional_rnn/bw/transpose"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Enter"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Enter_1"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Enter_2"
  op: "Enter"
  input: "syntax_1_1/LSTMCellZeroState_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Enter_3"
  op: "Enter"
  input: "syntax_1_1/LSTMCellZeroState_1/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Merge"
  op: "Merge"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Enter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_1"
  op: "Merge"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Enter_1"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_2"
  op: "Merge"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Enter_2"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_3"
  op: "Merge"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Enter_3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Less"
  op: "Less"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Merge"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Switch"
  op: "Switch"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Merge"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_1"
  op: "Switch"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_2"
  op: "Switch"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_2"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_3"
  op: "Switch"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
  op: "Identity"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Identity_1"
  op: "Identity"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Identity_2"
  op: "Identity"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Identity_3"
  op: "Identity"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
  op: "Const"
  input: "^syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat"
  op: "ConcatV2"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul"
  op: "MatMul"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Const"
  op: "Const"
  input: "^syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split/split_dim"
  op: "Const"
  input: "^syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split"
  op: "Split"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split/split_dim"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add/y"
  op: "Const"
  input: "^syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add"
  op: "Add"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split:2"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul"
  op: "Mul"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh"
  op: "Tanh"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1"
  op: "Mul"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1"
  op: "Add"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
  op: "Mul"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/CheckSeqLen"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Select/Enter"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Select"
  op: "Select"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Select/Enter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual_1"
  op: "GreaterEqual"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1"
  op: "Select"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual_1"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Identity_2"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual_2"
  op: "GreaterEqual"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2"
  op: "Select"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual_2"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Select"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/add/y"
  op: "Const"
  input: "^syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/add"
  op: "Add"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Exit"
  op: "Exit"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Exit_1"
  op: "Exit"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Exit_2"
  op: "Exit"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/while/Exit_3"
  op: "Exit"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArray"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArray"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 200
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/range"
  op: "Range"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/range/start"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/Rank"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/concat_1/values_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/concat_1"
  op: "ConcatV2"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/concat_1/values_0"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/range"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/bidirectional_rnn/bw/bw/transpose"
  op: "Transpose"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1_1/ReverseSequence"
  op: "ReverseSequence"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/transpose"
  input: "shuffle_batch:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "syntax_2_1/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "syntax_2_1/concat"
  op: "ConcatV2"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/transpose"
  input: "syntax_1_1/ReverseSequence"
  input: "syntax_2_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/range/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/range"
  op: "Range"
  input: "syntax_2_1/Tensordot/range/start"
  input: "syntax_2_1/Tensordot/range/limit"
  input: "syntax_2_1/Tensordot/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/range_1/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/range_1"
  op: "Range"
  input: "syntax_2_1/Tensordot/range_1/start"
  input: "syntax_2_1/Tensordot/range_1/limit"
  input: "syntax_2_1/Tensordot/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: " \000\000\000@\000\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/GreaterEqual"
  op: "GreaterEqual"
  input: "syntax_2_1/Tensordot/range"
  input: "syntax_2_1/Tensordot/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Cast"
  op: "Cast"
  input: "syntax_2_1/Tensordot/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/mul"
  op: "Mul"
  input: "syntax_2_1/Tensordot/Cast"
  input: "syntax_2_1/Tensordot/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Less"
  op: "Less"
  input: "syntax_2_1/Tensordot/range"
  input: "syntax_2_1/Tensordot/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Cast_1"
  op: "Cast"
  input: "syntax_2_1/Tensordot/Less"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/add"
  op: "Add"
  input: "syntax_2_1/Tensordot/range"
  input: "syntax_2_1/Tensordot/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/mul_1"
  op: "Mul"
  input: "syntax_2_1/Tensordot/Cast_1"
  input: "syntax_2_1/Tensordot/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/add_1"
  op: "Add"
  input: "syntax_2_1/Tensordot/mul"
  input: "syntax_2_1/Tensordot/mul_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/range_2/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/range_2/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/range_2"
  op: "Range"
  input: "syntax_2_1/Tensordot/range_2/start"
  input: "syntax_2_1/Tensordot/Rank"
  input: "syntax_2_1/Tensordot/range_2/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/ListDiff"
  op: "ListDiff"
  input: "syntax_2_1/Tensordot/range_2"
  input: "syntax_2_1/Tensordot/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Gather"
  op: "Gather"
  input: "syntax_2_1/Tensordot/Shape"
  input: "syntax_2_1/Tensordot/ListDiff"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Gather_1"
  op: "Gather"
  input: "syntax_2_1/Tensordot/Shape"
  input: "syntax_2_1/Tensordot/add_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Prod"
  op: "Prod"
  input: "syntax_2_1/Tensordot/Gather"
  input: "syntax_2_1/Tensordot/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Prod_1"
  op: "Prod"
  input: "syntax_2_1/Tensordot/Gather_1"
  input: "syntax_2_1/Tensordot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/concat"
  op: "ConcatV2"
  input: "syntax_2_1/Tensordot/Gather_1"
  input: "syntax_2_1/Tensordot/Gather"
  input: "syntax_2_1/Tensordot/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/concat_1"
  op: "ConcatV2"
  input: "syntax_2_1/Tensordot/ListDiff"
  input: "syntax_2_1/Tensordot/add_1"
  input: "syntax_2_1/Tensordot/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/stack"
  op: "Pack"
  input: "syntax_2_1/Tensordot/Prod"
  input: "syntax_2_1/Tensordot/Prod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/transpose"
  op: "Transpose"
  input: "syntax_2_1/concat"
  input: "syntax_2_1/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Reshape"
  op: "Reshape"
  input: "syntax_2_1/Tensordot/transpose"
  input: "syntax_2_1/Tensordot/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\220\001\000\000"
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/GreaterEqual_1"
  op: "GreaterEqual"
  input: "syntax_2_1/Tensordot/range_1"
  input: "syntax_2_1/Tensordot/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Cast_2"
  op: "Cast"
  input: "syntax_2_1/Tensordot/GreaterEqual_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/mul_2"
  op: "Mul"
  input: "syntax_2_1/Tensordot/Cast_2"
  input: "syntax_2_1/Tensordot/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Less_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Less_1"
  op: "Less"
  input: "syntax_2_1/Tensordot/range_1"
  input: "syntax_2_1/Tensordot/Less_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Cast_3"
  op: "Cast"
  input: "syntax_2_1/Tensordot/Less_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/add_2"
  op: "Add"
  input: "syntax_2_1/Tensordot/range_1"
  input: "syntax_2_1/Tensordot/Rank_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/mul_3"
  op: "Mul"
  input: "syntax_2_1/Tensordot/Cast_3"
  input: "syntax_2_1/Tensordot/add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/add_3"
  op: "Add"
  input: "syntax_2_1/Tensordot/mul_2"
  input: "syntax_2_1/Tensordot/mul_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/range_3/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/range_3/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/range_3"
  op: "Range"
  input: "syntax_2_1/Tensordot/range_3/start"
  input: "syntax_2_1/Tensordot/Rank_1"
  input: "syntax_2_1/Tensordot/range_3/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/ListDiff_1"
  op: "ListDiff"
  input: "syntax_2_1/Tensordot/range_3"
  input: "syntax_2_1/Tensordot/add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Gather_2"
  op: "Gather"
  input: "syntax_2_1/Tensordot/Shape_1"
  input: "syntax_2_1/Tensordot/ListDiff_1"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Gather_3"
  op: "Gather"
  input: "syntax_2_1/Tensordot/Shape_1"
  input: "syntax_2_1/Tensordot/add_3"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Prod_2"
  op: "Prod"
  input: "syntax_2_1/Tensordot/Gather_2"
  input: "syntax_2_1/Tensordot/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Prod_3"
  op: "Prod"
  input: "syntax_2_1/Tensordot/Gather_3"
  input: "syntax_2_1/Tensordot/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/concat_2"
  op: "ConcatV2"
  input: "syntax_2_1/Tensordot/Gather_3"
  input: "syntax_2_1/Tensordot/Gather_2"
  input: "syntax_2_1/Tensordot/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/concat_3/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/concat_3"
  op: "ConcatV2"
  input: "syntax_2_1/Tensordot/add_3"
  input: "syntax_2_1/Tensordot/ListDiff_1"
  input: "syntax_2_1/Tensordot/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/stack_1"
  op: "Pack"
  input: "syntax_2_1/Tensordot/Prod_3"
  input: "syntax_2_1/Tensordot/Prod_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/transpose_1"
  op: "Transpose"
  input: "syntax_2/syntax_2_weights/read"
  input: "syntax_2_1/Tensordot/concat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/Reshape_1"
  op: "Reshape"
  input: "syntax_2_1/Tensordot/transpose_1"
  input: "syntax_2_1/Tensordot/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/MatMul"
  op: "MatMul"
  input: "syntax_2_1/Tensordot/Reshape"
  input: "syntax_2_1/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/concat_4/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot/concat_4"
  op: "ConcatV2"
  input: "syntax_2_1/Tensordot/Gather"
  input: "syntax_2_1/Tensordot/Gather_2"
  input: "syntax_2_1/Tensordot/concat_4/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Tensordot"
  op: "Reshape"
  input: "syntax_2_1/Tensordot/MatMul"
  input: "syntax_2_1/Tensordot/concat_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "syntax_2_1/Add"
  op: "Add"
  input: "syntax_2_1/Tensordot"
  input: "syntax_2/syntax_2_biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        tensor_content: "\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200?"
      }
    }
  }
}
node {
  name: "huber_loss/Sub"
  op: "Sub"
  input: "syntax_2/Add"
  input: "Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss/Abs"
  op: "Abs"
  input: "huber_loss/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss/Minimum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "huber_loss/Minimum"
  op: "Minimum"
  input: "huber_loss/Abs"
  input: "huber_loss/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss/sub"
  op: "Sub"
  input: "huber_loss/Abs"
  input: "huber_loss/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss/pow/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "huber_loss/pow"
  op: "Pow"
  input: "huber_loss/Minimum"
  input: "huber_loss/pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "huber_loss/mul"
  op: "Mul"
  input: "huber_loss/mul/x"
  input: "huber_loss/pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "huber_loss/mul_1"
  op: "Mul"
  input: "huber_loss/mul_1/x"
  input: "huber_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss/add"
  op: "Add"
  input: "huber_loss/mul"
  input: "huber_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "huber_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/values/rank"
  op: "Rank"
  input: "huber_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_scalar/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "huber_loss/assert_broadcastable/is_scalar/x"
  input: "huber_loss/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/Switch"
  op: "Switch"
  input: "huber_loss/assert_broadcastable/is_scalar"
  input: "huber_loss/assert_broadcastable/is_scalar"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/switch_t"
  op: "Identity"
  input: "huber_loss/assert_broadcastable/is_valid_shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/switch_f"
  op: "Identity"
  input: "huber_loss/assert_broadcastable/is_valid_shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/pred_id"
  op: "Identity"
  input: "huber_loss/assert_broadcastable/is_scalar"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/Switch_1"
  op: "Switch"
  input: "huber_loss/assert_broadcastable/is_scalar"
  input: "huber_loss/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/assert_broadcastable/is_scalar"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
  op: "Switch"
  input: "huber_loss/assert_broadcastable/values/rank"
  input: "huber_loss/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/assert_broadcastable/values/rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
  op: "Switch"
  input: "huber_loss/assert_broadcastable/weights/rank"
  input: "huber_loss/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/assert_broadcastable/weights/rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  op: "Equal"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
  op: "Switch"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  op: "Identity"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_f"
  op: "Identity"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  op: "Identity"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
  op: "Switch"
  input: "huber_loss/assert_broadcastable/values/shape"
  input: "huber_loss/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1"
  op: "Switch"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  op: "ExpandDims"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1:1"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
  op: "Shape"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
  op: "Fill"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
  op: "ConcatV2"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
  op: "Switch"
  input: "huber_loss/assert_broadcastable/weights/shape"
  input: "huber_loss/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1"
  op: "Switch"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
  op: "ExpandDims"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1:1"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
  op: "DenseToDenseSetOperation"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "set_operation"
    value {
      s: "a-b"
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
  op: "Size"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
  op: "Equal"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
  op: "Switch"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
  op: "Merge"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/is_valid_shape/Merge"
  op: "Merge"
  input: "huber_loss/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
  input: "huber_loss/assert_broadcastable/is_valid_shape/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "huber_loss/assert_broadcastable/weights:0"
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "huber_loss/add:0"
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/Switch"
  op: "Switch"
  input: "huber_loss/assert_broadcastable/is_valid_shape/Merge"
  input: "huber_loss/assert_broadcastable/is_valid_shape/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/switch_t"
  op: "Identity"
  input: "huber_loss/assert_broadcastable/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/switch_f"
  op: "Identity"
  input: "huber_loss/assert_broadcastable/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/pred_id"
  op: "Identity"
  input: "huber_loss/assert_broadcastable/is_valid_shape/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/NoOp"
  op: "NoOp"
  input: "^huber_loss/assert_broadcastable/AssertGuard/switch_t"
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/control_dependency"
  op: "Identity"
  input: "huber_loss/assert_broadcastable/AssertGuard/switch_t"
  input: "^huber_loss/assert_broadcastable/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/assert_broadcastable/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "huber_loss/assert_broadcastable/weights:0"
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/Assert/data_5"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "huber_loss/add:0"
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/Assert/data_7"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "huber_loss/assert_broadcastable/is_valid_shape/Merge"
  input: "huber_loss/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/assert_broadcastable/is_valid_shape/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "huber_loss/assert_broadcastable/weights/shape"
  input: "huber_loss/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "huber_loss/assert_broadcastable/values/shape"
  input: "huber_loss/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/Assert/Switch_3"
  op: "Switch"
  input: "huber_loss/assert_broadcastable/is_scalar"
  input: "huber_loss/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/assert_broadcastable/is_scalar"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/Assert"
  op: "Assert"
  input: "huber_loss/assert_broadcastable/AssertGuard/Assert/Switch"
  input: "huber_loss/assert_broadcastable/AssertGuard/Assert/data_0"
  input: "huber_loss/assert_broadcastable/AssertGuard/Assert/data_1"
  input: "huber_loss/assert_broadcastable/AssertGuard/Assert/data_2"
  input: "huber_loss/assert_broadcastable/AssertGuard/Assert/Switch_1"
  input: "huber_loss/assert_broadcastable/AssertGuard/Assert/data_4"
  input: "huber_loss/assert_broadcastable/AssertGuard/Assert/data_5"
  input: "huber_loss/assert_broadcastable/AssertGuard/Assert/Switch_2"
  input: "huber_loss/assert_broadcastable/AssertGuard/Assert/data_7"
  input: "huber_loss/assert_broadcastable/AssertGuard/Assert/Switch_3"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "huber_loss/assert_broadcastable/AssertGuard/switch_f"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/assert_broadcastable/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/assert_broadcastable/AssertGuard/Merge"
  op: "Merge"
  input: "huber_loss/assert_broadcastable/AssertGuard/control_dependency_1"
  input: "huber_loss/assert_broadcastable/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/ToFloat_3/x"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "huber_loss/Mul"
  op: "Mul"
  input: "huber_loss/add"
  input: "huber_loss/ToFloat_3/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss/Rank"
  op: "Rank"
  input: "huber_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/range/start"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss/range/delta"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "huber_loss/range"
  op: "Range"
  input: "huber_loss/range/start"
  input: "huber_loss/Rank"
  input: "huber_loss/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/Sum"
  op: "Sum"
  input: "huber_loss/Mul"
  input: "huber_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "huber_loss/num_present/Equal/y"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "huber_loss/num_present/Equal"
  op: "Equal"
  input: "huber_loss/ToFloat_3/x"
  input: "huber_loss/num_present/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/zeros_like"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "huber_loss/num_present/ones_like/Shape"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/ones_like/Const"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "huber_loss/num_present/ones_like"
  op: "Fill"
  input: "huber_loss/num_present/ones_like/Shape"
  input: "huber_loss/num_present/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/Select"
  op: "Select"
  input: "huber_loss/num_present/Equal"
  input: "huber_loss/num_present/zeros_like"
  input: "huber_loss/num_present/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "huber_loss/add"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Rank"
  input: "huber_loss/add"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Switch"
  op: "Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/switch_t"
  op: "Identity"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/switch_f"
  op: "Identity"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  op: "Identity"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Switch_1"
  op: "Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
  op: "Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/values/rank"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/num_present/broadcast_weights/assert_broadcastable/values/rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
  op: "Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/num_present/broadcast_weights/assert_broadcastable/weights/rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  op: "Equal"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
  op: "Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  op: "Identity"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_f"
  op: "Identity"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  op: "Identity"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
  op: "Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/num_present/broadcast_weights/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1"
  op: "Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/num_present/broadcast_weights/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  op: "ExpandDims"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1:1"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
  op: "Shape"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
  op: "Fill"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
  op: "ConcatV2"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
  op: "Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1"
  op: "Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
  op: "ExpandDims"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1:1"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
  op: "DenseToDenseSetOperation"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "set_operation"
    value {
      s: "a-b"
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
  op: "Size"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
  op: "Equal"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
  op: "Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
  op: "Merge"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  op: "Merge"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/Const"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/Const_1"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/Const_2"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "huber_loss/num_present/Select:0"
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/Const_3"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/Const_4"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "huber_loss/add:0"
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/Const_5"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Switch"
  op: "Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
  op: "Identity"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  op: "Identity"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  op: "Identity"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/NoOp"
  op: "NoOp"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency"
  op: "Identity"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
  input: "^huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "huber_loss/num_present/Select:0"
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_5"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "huber_loss/add:0"
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_7"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/num_present/broadcast_weights/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_3"
  op: "Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/num_present/broadcast_weights/assert_broadcastable/is_scalar"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert"
  op: "Assert"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_0"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_1"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_2"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_1"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_4"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_5"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_2"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_7"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_3"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  input: "^huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
  op: "Merge"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency_1"
  input: "huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "huber_loss/add"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "huber_loss/num_present/broadcast_weights/ones_like/Shape"
  input: "huber_loss/num_present/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/broadcast_weights"
  op: "Mul"
  input: "huber_loss/num_present/Select"
  input: "huber_loss/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/Rank"
  op: "Rank"
  input: "huber_loss/num_present/broadcast_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present/range/start"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss/num_present/range/delta"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "huber_loss/num_present/range"
  op: "Range"
  input: "huber_loss/num_present/range/start"
  input: "huber_loss/num_present/Rank"
  input: "huber_loss/num_present/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/num_present"
  op: "Sum"
  input: "huber_loss/num_present/broadcast_weights"
  input: "huber_loss/num_present/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "huber_loss/Rank_1"
  op: "Rank"
  input: "huber_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss/range_1/start"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss/range_1/delta"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "huber_loss/range_1"
  op: "Range"
  input: "huber_loss/range_1/start"
  input: "huber_loss/Rank_1"
  input: "huber_loss/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss/Sum_1"
  op: "Sum"
  input: "huber_loss/Sum"
  input: "huber_loss/range_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "huber_loss/Greater/y"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "huber_loss/Greater"
  op: "Greater"
  input: "huber_loss/num_present"
  input: "huber_loss/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss/Equal/y"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "huber_loss/Equal"
  op: "Equal"
  input: "huber_loss/num_present"
  input: "huber_loss/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss/ones_like/Shape"
  op: "Shape"
  input: "huber_loss/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "huber_loss/ones_like/Const"
  op: "Const"
  input: "^huber_loss/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "huber_loss/ones_like"
  op: "Fill"
  input: "huber_loss/ones_like/Shape"
  input: "huber_loss/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss/Select"
  op: "Select"
  input: "huber_loss/Equal"
  input: "huber_loss/ones_like"
  input: "huber_loss/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss/div"
  op: "RealDiv"
  input: "huber_loss/Sum_1"
  input: "huber_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss/zeros_like"
  op: "ZerosLike"
  input: "huber_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss/value"
  op: "Select"
  input: "huber_loss/Greater"
  input: "huber_loss/div"
  input: "huber_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "Rank"
  op: "Rank"
  input: "huber_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "range"
  op: "Range"
  input: "range/start"
  input: "Rank"
  input: "range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "huber_loss/value"
  input: "range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "huber_loss_1/Sub"
  op: "Sub"
  input: "syntax_2_1/Add"
  input: "Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/Abs"
  op: "Abs"
  input: "huber_loss_1/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/Minimum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "huber_loss_1/Minimum"
  op: "Minimum"
  input: "huber_loss_1/Abs"
  input: "huber_loss_1/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/sub"
  op: "Sub"
  input: "huber_loss_1/Abs"
  input: "huber_loss_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/pow/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "huber_loss_1/pow"
  op: "Pow"
  input: "huber_loss_1/Minimum"
  input: "huber_loss_1/pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "huber_loss_1/mul"
  op: "Mul"
  input: "huber_loss_1/mul/x"
  input: "huber_loss_1/pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "huber_loss_1/mul_1"
  op: "Mul"
  input: "huber_loss_1/mul_1/x"
  input: "huber_loss_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/add"
  op: "Add"
  input: "huber_loss_1/mul"
  input: "huber_loss_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/values/shape"
  op: "Shape"
  input: "huber_loss_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/values/rank"
  op: "Rank"
  input: "huber_loss_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_scalar/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "huber_loss_1/assert_broadcastable/is_scalar/x"
  input: "huber_loss_1/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/Switch"
  op: "Switch"
  input: "huber_loss_1/assert_broadcastable/is_scalar"
  input: "huber_loss_1/assert_broadcastable/is_scalar"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/switch_t"
  op: "Identity"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/switch_f"
  op: "Identity"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/pred_id"
  op: "Identity"
  input: "huber_loss_1/assert_broadcastable/is_scalar"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/Switch_1"
  op: "Switch"
  input: "huber_loss_1/assert_broadcastable/is_scalar"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/assert_broadcastable/is_scalar"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
  op: "Switch"
  input: "huber_loss_1/assert_broadcastable/values/rank"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/assert_broadcastable/values/rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
  op: "Switch"
  input: "huber_loss_1/assert_broadcastable/weights/rank"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/assert_broadcastable/weights/rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  op: "Equal"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
  op: "Switch"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  op: "Identity"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_f"
  op: "Identity"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  op: "Identity"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
  op: "Switch"
  input: "huber_loss_1/assert_broadcastable/values/shape"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1"
  op: "Switch"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  op: "ExpandDims"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1:1"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
  op: "Shape"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
  op: "Fill"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
  op: "ConcatV2"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
  op: "Switch"
  input: "huber_loss_1/assert_broadcastable/weights/shape"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1"
  op: "Switch"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
  op: "ExpandDims"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1:1"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
  op: "DenseToDenseSetOperation"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "set_operation"
    value {
      s: "a-b"
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
  op: "Size"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
  op: "Equal"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
  op: "Switch"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
  op: "Merge"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/is_valid_shape/Merge"
  op: "Merge"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "huber_loss_1/assert_broadcastable/weights:0"
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "huber_loss_1/add:0"
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/Switch"
  op: "Switch"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/Merge"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/switch_t"
  op: "Identity"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/switch_f"
  op: "Identity"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/pred_id"
  op: "Identity"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/NoOp"
  op: "NoOp"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/switch_t"
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/control_dependency"
  op: "Identity"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/switch_t"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/assert_broadcastable/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "huber_loss_1/assert_broadcastable/weights:0"
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/data_5"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "huber_loss_1/add:0"
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/data_7"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "huber_loss_1/assert_broadcastable/is_valid_shape/Merge"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/assert_broadcastable/is_valid_shape/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "huber_loss_1/assert_broadcastable/weights/shape"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "huber_loss_1/assert_broadcastable/values/shape"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/Switch_3"
  op: "Switch"
  input: "huber_loss_1/assert_broadcastable/is_scalar"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/assert_broadcastable/is_scalar"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/Assert"
  op: "Assert"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/Switch"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/data_0"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/data_1"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/data_2"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/Switch_1"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/data_4"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/data_5"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/Switch_2"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/data_7"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/Assert/Switch_3"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/switch_f"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/assert_broadcastable/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  op: "Merge"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/control_dependency_1"
  input: "huber_loss_1/assert_broadcastable/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/ToFloat_3/x"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "huber_loss_1/Mul"
  op: "Mul"
  input: "huber_loss_1/add"
  input: "huber_loss_1/ToFloat_3/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/Rank"
  op: "Rank"
  input: "huber_loss_1/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/range/start"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss_1/range/delta"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "huber_loss_1/range"
  op: "Range"
  input: "huber_loss_1/range/start"
  input: "huber_loss_1/Rank"
  input: "huber_loss_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/Sum"
  op: "Sum"
  input: "huber_loss_1/Mul"
  input: "huber_loss_1/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "huber_loss_1/num_present/Equal/y"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/Equal"
  op: "Equal"
  input: "huber_loss_1/ToFloat_3/x"
  input: "huber_loss_1/num_present/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/zeros_like"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/ones_like/Shape"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/ones_like/Const"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/ones_like"
  op: "Fill"
  input: "huber_loss_1/num_present/ones_like/Shape"
  input: "huber_loss_1/num_present/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/Select"
  op: "Select"
  input: "huber_loss_1/num_present/Equal"
  input: "huber_loss_1/num_present/zeros_like"
  input: "huber_loss_1/num_present/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "huber_loss_1/add"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Rank"
  input: "huber_loss_1/add"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Switch"
  op: "Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/switch_t"
  op: "Identity"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/switch_f"
  op: "Identity"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  op: "Identity"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Switch_1"
  op: "Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
  op: "Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/values/rank"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/num_present/broadcast_weights/assert_broadcastable/values/rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
  op: "Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/num_present/broadcast_weights/assert_broadcastable/weights/rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  op: "Equal"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
  op: "Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  op: "Identity"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_f"
  op: "Identity"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  op: "Identity"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
  op: "Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/num_present/broadcast_weights/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1"
  op: "Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/num_present/broadcast_weights/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  op: "ExpandDims"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/Switch_1:1"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
  op: "Shape"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
  op: "Fill"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
  op: "ConcatV2"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ones_like"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
  op: "Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/num_present/broadcast_weights/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1"
  op: "Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/num_present/broadcast_weights/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
  op: "ExpandDims"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/Switch_1:1"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
  op: "DenseToDenseSetOperation"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "set_operation"
    value {
      s: "a-b"
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
  op: "Size"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
  op: "Equal"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/x"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
  op: "Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/is_same_rank"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
  op: "Merge"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Switch_1"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/has_invalid_dims"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  op: "Merge"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/has_valid_nonscalar_shape/Merge"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/Const"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/Const_1"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/Const_2"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "huber_loss_1/num_present/Select:0"
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/Const_3"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/Const_4"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "huber_loss_1/add:0"
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/Const_5"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Switch"
  op: "Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
  op: "Identity"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  op: "Identity"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  op: "Identity"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/NoOp"
  op: "NoOp"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency"
  op: "Identity"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
  input: "^huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "huber_loss_1/num_present/Select:0"
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_4"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_5"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "huber_loss_1/add:0"
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_7"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/num_present/broadcast_weights/assert_broadcastable/weights/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/num_present/broadcast_weights/assert_broadcastable/values/shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_3"
  op: "Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert"
  op: "Assert"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_0"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_1"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_2"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_1"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_4"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_5"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_2"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/data_7"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert/Switch_3"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
  input: "^huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
  op: "Merge"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency_1"
  input: "huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "huber_loss_1/add"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  input: "^huber_loss_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "huber_loss_1/num_present/broadcast_weights/ones_like/Shape"
  input: "huber_loss_1/num_present/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/broadcast_weights"
  op: "Mul"
  input: "huber_loss_1/num_present/Select"
  input: "huber_loss_1/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/Rank"
  op: "Rank"
  input: "huber_loss_1/num_present/broadcast_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/range/start"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/range/delta"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present/range"
  op: "Range"
  input: "huber_loss_1/num_present/range/start"
  input: "huber_loss_1/num_present/Rank"
  input: "huber_loss_1/num_present/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/num_present"
  op: "Sum"
  input: "huber_loss_1/num_present/broadcast_weights"
  input: "huber_loss_1/num_present/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "huber_loss_1/Rank_1"
  op: "Rank"
  input: "huber_loss_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/range_1/start"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "huber_loss_1/range_1/delta"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "huber_loss_1/range_1"
  op: "Range"
  input: "huber_loss_1/range_1/start"
  input: "huber_loss_1/Rank_1"
  input: "huber_loss_1/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/Sum_1"
  op: "Sum"
  input: "huber_loss_1/Sum"
  input: "huber_loss_1/range_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "huber_loss_1/Greater/y"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "huber_loss_1/Greater"
  op: "Greater"
  input: "huber_loss_1/num_present"
  input: "huber_loss_1/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/Equal/y"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "huber_loss_1/Equal"
  op: "Equal"
  input: "huber_loss_1/num_present"
  input: "huber_loss_1/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/ones_like/Shape"
  op: "Shape"
  input: "huber_loss_1/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "huber_loss_1/ones_like/Const"
  op: "Const"
  input: "^huber_loss_1/assert_broadcastable/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "huber_loss_1/ones_like"
  op: "Fill"
  input: "huber_loss_1/ones_like/Shape"
  input: "huber_loss_1/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/Select"
  op: "Select"
  input: "huber_loss_1/Equal"
  input: "huber_loss_1/ones_like"
  input: "huber_loss_1/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/div"
  op: "RealDiv"
  input: "huber_loss_1/Sum_1"
  input: "huber_loss_1/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/zeros_like"
  op: "ZerosLike"
  input: "huber_loss_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "huber_loss_1/value"
  op: "Select"
  input: "huber_loss_1/Greater"
  input: "huber_loss_1/div"
  input: "huber_loss_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "Rank_1"
  op: "Rank"
  input: "huber_loss_1/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "range_1"
  op: "Range"
  input: "range_1/start"
  input: "Rank_1"
  input: "range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Mean_1"
  op: "Mean"
  input: "huber_loss_1/value"
  input: "range_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "total_loss"
  op: "AddN"
  input: "huber_loss/value"
  input: "Mean"
  input: "huber_loss_1/value"
  input: "Mean_1"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast"
  op: "Cast"
  input: "global_step/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2910
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1"
  op: "Cast"
  input: "ExponentialDecay/Cast_1/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.949999988079071
      }
    }
  }
}
node {
  name: "ExponentialDecay/truediv"
  op: "RealDiv"
  input: "ExponentialDecay/Cast"
  input: "ExponentialDecay/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Floor"
  op: "Floor"
  input: "ExponentialDecay/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Pow"
  op: "Pow"
  input: "ExponentialDecay/Cast_2/x"
  input: "ExponentialDecay/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay"
  op: "Mul"
  input: "ExponentialDecay/learning_rate"
  input: "ExponentialDecay/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Shape"
  input: "total_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^syntax_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add"
  op: "Add"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPush"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_4"
  op: "Enter"
  input: "gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_2"
  op: "Merge"
  input: "gradients/f_count_4"
  input: "gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_2"
  op: "Switch"
  input: "gradients/Merge_2"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add_1/y"
  op: "Const"
  input: "^syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_1"
  op: "Add"
  input: "gradients/Switch_2:1"
  input: "gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_2"
  op: "NextIteration"
  input: "gradients/Add_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPush"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_5"
  op: "Exit"
  input: "gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_5"
  op: "Enter"
  input: "gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_3"
  op: "Merge"
  input: "gradients/b_count_5"
  input: "gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "gradients/Merge_3"
  input: "gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_6"
  op: "LoopCond"
  input: "gradients/GreaterEqual_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_3"
  op: "Switch"
  input: "gradients/Merge_3"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub_1"
  op: "Sub"
  input: "gradients/Switch_3:1"
  input: "gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_3"
  op: "NextIteration"
  input: "gradients/Sub_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_7"
  op: "Exit"
  input: "gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_7"
  op: "Enter"
  input: "gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_4"
  op: "Merge"
  input: "gradients/f_count_7"
  input: "gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_4"
  op: "Switch"
  input: "gradients/Merge_4"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add_2/y"
  op: "Const"
  input: "^syntax_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_2"
  op: "Add"
  input: "gradients/Switch_4:1"
  input: "gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_4"
  op: "NextIteration"
  input: "gradients/Add_2"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPush"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPush"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_8"
  op: "Exit"
  input: "gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_9"
  op: "Enter"
  input: "gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_5"
  op: "Merge"
  input: "gradients/b_count_9"
  input: "gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "gradients/Merge_5"
  input: "gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_10"
  op: "LoopCond"
  input: "gradients/GreaterEqual_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_5"
  op: "Switch"
  input: "gradients/Merge_5"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub_2"
  op: "Sub"
  input: "gradients/Switch_5:1"
  input: "gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_5"
  op: "NextIteration"
  input: "gradients/Sub_2"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_11"
  op: "Exit"
  input: "gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_10"
  op: "Enter"
  input: "gradients/f_count_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_6"
  op: "Merge"
  input: "gradients/f_count_10"
  input: "gradients/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_6"
  op: "Switch"
  input: "gradients/Merge_6"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add_3/y"
  op: "Const"
  input: "^syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_3"
  op: "Add"
  input: "gradients/Switch_6:1"
  input: "gradients/Add_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_6"
  op: "NextIteration"
  input: "gradients/Add_3"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPush"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPush"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_11"
  op: "Exit"
  input: "gradients/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_13"
  op: "Enter"
  input: "gradients/f_count_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_7"
  op: "Merge"
  input: "gradients/b_count_13"
  input: "gradients/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_3/Enter"
  op: "Enter"
  input: "gradients/b_count_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/GreaterEqual_3"
  op: "GreaterEqual"
  input: "gradients/Merge_7"
  input: "gradients/GreaterEqual_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_14"
  op: "LoopCond"
  input: "gradients/GreaterEqual_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_7"
  op: "Switch"
  input: "gradients/Merge_7"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub_3"
  op: "Sub"
  input: "gradients/Switch_7:1"
  input: "gradients/GreaterEqual_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_7"
  op: "NextIteration"
  input: "gradients/Sub_3"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_15"
  op: "Exit"
  input: "gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Fill"
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape"
  op: "Shape"
  input: "huber_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Size"
  op: "Size"
  input: "gradients/Mean_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/add"
  op: "Add"
  input: "range"
  input: "gradients/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/mod"
  op: "FloorMod"
  input: "gradients/Mean_grad/add"
  input: "gradients/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_1"
  op: "Shape"
  input: "gradients/Mean_grad/mod"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range"
  op: "Range"
  input: "gradients/Mean_grad/range/start"
  input: "gradients/Mean_grad/Size"
  input: "gradients/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill"
  op: "Fill"
  input: "gradients/Mean_grad/Shape_1"
  input: "gradients/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Mean_grad/range"
  input: "gradients/Mean_grad/mod"
  input: "gradients/Mean_grad/Shape"
  input: "gradients/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/Mean_grad/DynamicStitch"
  input: "gradients/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Shape"
  input: "gradients/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/total_loss_grad/tuple/control_dependency_1"
  input: "gradients/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape"
  input: "gradients/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_2"
  op: "Shape"
  input: "huber_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_3"
  op: "Shape"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_2"
  input: "gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_3"
  input: "gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/Mean_grad/Prod_1"
  input: "gradients/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Prod"
  input: "gradients/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Cast"
  op: "Cast"
  input: "gradients/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile"
  input: "gradients/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Shape"
  op: "Shape"
  input: "huber_loss_1/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Size"
  op: "Size"
  input: "gradients/Mean_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_1_grad/add"
  op: "Add"
  input: "range_1"
  input: "gradients/Mean_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/mod"
  op: "FloorMod"
  input: "gradients/Mean_1_grad/add"
  input: "gradients/Mean_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Shape_1"
  op: "Shape"
  input: "gradients/Mean_1_grad/mod"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_1_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/range"
  op: "Range"
  input: "gradients/Mean_1_grad/range/start"
  input: "gradients/Mean_1_grad/Size"
  input: "gradients/Mean_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Fill"
  op: "Fill"
  input: "gradients/Mean_1_grad/Shape_1"
  input: "gradients/Mean_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Mean_1_grad/range"
  input: "gradients/Mean_1_grad/mod"
  input: "gradients/Mean_1_grad/Shape"
  input: "gradients/Mean_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/Mean_1_grad/DynamicStitch"
  input: "gradients/Mean_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Mean_1_grad/Shape"
  input: "gradients/Mean_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/total_loss_grad/tuple/control_dependency_3"
  input: "gradients/Mean_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_1_grad/Reshape"
  input: "gradients/Mean_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Shape_2"
  op: "Shape"
  input: "huber_loss_1/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Shape_3"
  op: "Shape"
  input: "Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Prod"
  op: "Prod"
  input: "gradients/Mean_1_grad/Shape_2"
  input: "gradients/Mean_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Prod_1"
  op: "Prod"
  input: "gradients/Mean_1_grad/Shape_3"
  input: "gradients/Mean_1_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/Mean_1_grad/Prod_1"
  input: "gradients/Mean_1_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/Mean_1_grad/Prod"
  input: "gradients/Mean_1_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/Cast"
  op: "Cast"
  input: "gradients/Mean_1_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_1_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_1_grad/Tile"
  input: "gradients/Mean_1_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/total_loss_grad/tuple/control_dependency"
  input: "gradients/Mean_grad/truediv"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/value_grad/zeros_like"
  op: "ZerosLike"
  input: "huber_loss/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/value_grad/Select"
  op: "Select"
  input: "huber_loss/Greater"
  input: "gradients/AddN"
  input: "gradients/huber_loss/value_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/value_grad/Select_1"
  op: "Select"
  input: "huber_loss/Greater"
  input: "gradients/huber_loss/value_grad/zeros_like"
  input: "gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/value_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss/value_grad/Select"
  input: "^gradients/huber_loss/value_grad/Select_1"
}
node {
  name: "gradients/huber_loss/value_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss/value_grad/Select"
  input: "^gradients/huber_loss/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/value_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/value_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss/value_grad/Select_1"
  input: "^gradients/huber_loss/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/value_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/total_loss_grad/tuple/control_dependency_2"
  input: "gradients/Mean_1_grad/truediv"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/value_grad/zeros_like"
  op: "ZerosLike"
  input: "huber_loss_1/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/value_grad/Select"
  op: "Select"
  input: "huber_loss_1/Greater"
  input: "gradients/AddN_1"
  input: "gradients/huber_loss_1/value_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/value_grad/Select_1"
  op: "Select"
  input: "huber_loss_1/Greater"
  input: "gradients/huber_loss_1/value_grad/zeros_like"
  input: "gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/value_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss_1/value_grad/Select"
  input: "^gradients/huber_loss_1/value_grad/Select_1"
}
node {
  name: "gradients/huber_loss_1/value_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss_1/value_grad/Select"
  input: "^gradients/huber_loss_1/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/value_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/value_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss_1/value_grad/Select_1"
  input: "^gradients/huber_loss_1/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/value_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/div_grad/Shape"
  op: "Shape"
  input: "huber_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/div_grad/Shape_1"
  op: "Shape"
  input: "huber_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss/div_grad/Shape"
  input: "gradients/huber_loss/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/div_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/huber_loss/value_grad/tuple/control_dependency"
  input: "huber_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/div_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss/div_grad/RealDiv"
  input: "gradients/huber_loss/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/div_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss/div_grad/Sum"
  input: "gradients/huber_loss/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/div_grad/Neg"
  op: "Neg"
  input: "huber_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/huber_loss/div_grad/Neg"
  input: "huber_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/huber_loss/div_grad/RealDiv_1"
  input: "huber_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/div_grad/mul"
  op: "Mul"
  input: "gradients/huber_loss/value_grad/tuple/control_dependency"
  input: "gradients/huber_loss/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/div_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss/div_grad/mul"
  input: "gradients/huber_loss/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/div_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss/div_grad/Sum_1"
  input: "gradients/huber_loss/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss/div_grad/Reshape"
  input: "^gradients/huber_loss/div_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss/div_grad/Reshape"
  input: "^gradients/huber_loss/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss/div_grad/Reshape_1"
  input: "^gradients/huber_loss/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/div_grad/Shape"
  op: "Shape"
  input: "huber_loss_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/div_grad/Shape_1"
  op: "Shape"
  input: "huber_loss_1/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss_1/div_grad/Shape"
  input: "gradients/huber_loss_1/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/div_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/huber_loss_1/value_grad/tuple/control_dependency"
  input: "huber_loss_1/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/div_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss_1/div_grad/RealDiv"
  input: "gradients/huber_loss_1/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/div_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss_1/div_grad/Sum"
  input: "gradients/huber_loss_1/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/div_grad/Neg"
  op: "Neg"
  input: "huber_loss_1/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/huber_loss_1/div_grad/Neg"
  input: "huber_loss_1/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/huber_loss_1/div_grad/RealDiv_1"
  input: "huber_loss_1/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/div_grad/mul"
  op: "Mul"
  input: "gradients/huber_loss_1/value_grad/tuple/control_dependency"
  input: "gradients/huber_loss_1/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/div_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss_1/div_grad/mul"
  input: "gradients/huber_loss_1/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/div_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss_1/div_grad/Sum_1"
  input: "gradients/huber_loss_1/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss_1/div_grad/Reshape"
  input: "^gradients/huber_loss_1/div_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss_1/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss_1/div_grad/Reshape"
  input: "^gradients/huber_loss_1/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss_1/div_grad/Reshape_1"
  input: "^gradients/huber_loss_1/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "huber_loss/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Select_grad/Select"
  op: "Select"
  input: "huber_loss/Equal"
  input: "gradients/huber_loss/div_grad/tuple/control_dependency_1"
  input: "gradients/huber_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Select_grad/Select_1"
  op: "Select"
  input: "huber_loss/Equal"
  input: "gradients/huber_loss/Select_grad/zeros_like"
  input: "gradients/huber_loss/div_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss/Select_grad/Select"
  input: "^gradients/huber_loss/Select_grad/Select_1"
}
node {
  name: "gradients/huber_loss/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss/Select_grad/Select"
  input: "^gradients/huber_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss/Select_grad/Select_1"
  input: "^gradients/huber_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_1_grad/Shape"
  op: "Shape"
  input: "huber_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_1_grad/Size"
  op: "Size"
  input: "gradients/huber_loss/Sum_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_1_grad/add"
  op: "Add"
  input: "huber_loss/range_1"
  input: "gradients/huber_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_1_grad/mod"
  op: "FloorMod"
  input: "gradients/huber_loss/Sum_1_grad/add"
  input: "gradients/huber_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_1_grad/Shape_1"
  op: "Shape"
  input: "gradients/huber_loss/Sum_1_grad/mod"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_1_grad/range"
  op: "Range"
  input: "gradients/huber_loss/Sum_1_grad/range/start"
  input: "gradients/huber_loss/Sum_1_grad/Size"
  input: "gradients/huber_loss/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_1_grad/Fill"
  op: "Fill"
  input: "gradients/huber_loss/Sum_1_grad/Shape_1"
  input: "gradients/huber_loss/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/huber_loss/Sum_1_grad/range"
  input: "gradients/huber_loss/Sum_1_grad/mod"
  input: "gradients/huber_loss/Sum_1_grad/Shape"
  input: "gradients/huber_loss/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/huber_loss/Sum_1_grad/DynamicStitch"
  input: "gradients/huber_loss/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/huber_loss/Sum_1_grad/Shape"
  input: "gradients/huber_loss/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss/div_grad/tuple/control_dependency"
  input: "gradients/huber_loss/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/huber_loss/Sum_1_grad/Reshape"
  input: "gradients/huber_loss/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "huber_loss_1/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Select_grad/Select"
  op: "Select"
  input: "huber_loss_1/Equal"
  input: "gradients/huber_loss_1/div_grad/tuple/control_dependency_1"
  input: "gradients/huber_loss_1/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Select_grad/Select_1"
  op: "Select"
  input: "huber_loss_1/Equal"
  input: "gradients/huber_loss_1/Select_grad/zeros_like"
  input: "gradients/huber_loss_1/div_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss_1/Select_grad/Select"
  input: "^gradients/huber_loss_1/Select_grad/Select_1"
}
node {
  name: "gradients/huber_loss_1/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss_1/Select_grad/Select"
  input: "^gradients/huber_loss_1/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss_1/Select_grad/Select_1"
  input: "^gradients/huber_loss_1/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_1_grad/Shape"
  op: "Shape"
  input: "huber_loss_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_1_grad/Size"
  op: "Size"
  input: "gradients/huber_loss_1/Sum_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_1_grad/add"
  op: "Add"
  input: "huber_loss_1/range_1"
  input: "gradients/huber_loss_1/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_1_grad/mod"
  op: "FloorMod"
  input: "gradients/huber_loss_1/Sum_1_grad/add"
  input: "gradients/huber_loss_1/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_1_grad/Shape_1"
  op: "Shape"
  input: "gradients/huber_loss_1/Sum_1_grad/mod"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_1_grad/range"
  op: "Range"
  input: "gradients/huber_loss_1/Sum_1_grad/range/start"
  input: "gradients/huber_loss_1/Sum_1_grad/Size"
  input: "gradients/huber_loss_1/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_1_grad/Fill"
  op: "Fill"
  input: "gradients/huber_loss_1/Sum_1_grad/Shape_1"
  input: "gradients/huber_loss_1/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/huber_loss_1/Sum_1_grad/range"
  input: "gradients/huber_loss_1/Sum_1_grad/mod"
  input: "gradients/huber_loss_1/Sum_1_grad/Shape"
  input: "gradients/huber_loss_1/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/huber_loss_1/Sum_1_grad/DynamicStitch"
  input: "gradients/huber_loss_1/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/huber_loss_1/Sum_1_grad/Shape"
  input: "gradients/huber_loss_1/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss_1/div_grad/tuple/control_dependency"
  input: "gradients/huber_loss_1/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/huber_loss_1/Sum_1_grad/Reshape"
  input: "gradients/huber_loss_1/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/ones_like_grad/Rank"
  op: "Rank"
  input: "gradients/huber_loss/Select_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/ones_like_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/huber_loss/ones_like_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss/ones_like_grad/range"
  op: "Range"
  input: "gradients/huber_loss/ones_like_grad/range/start"
  input: "gradients/huber_loss/ones_like_grad/Rank"
  input: "gradients/huber_loss/ones_like_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/ones_like_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss/Select_grad/tuple/control_dependency"
  input: "gradients/huber_loss/ones_like_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/ones_like_grad/Rank"
  op: "Rank"
  input: "gradients/huber_loss_1/Select_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/ones_like_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/ones_like_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/ones_like_grad/range"
  op: "Range"
  input: "gradients/huber_loss_1/ones_like_grad/range/start"
  input: "gradients/huber_loss_1/ones_like_grad/Rank"
  input: "gradients/huber_loss_1/ones_like_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/ones_like_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss_1/Select_grad/tuple/control_dependency"
  input: "gradients/huber_loss_1/ones_like_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/num_present_grad/Shape"
  op: "Shape"
  input: "huber_loss/num_present/broadcast_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/num_present_grad/Size"
  op: "Size"
  input: "gradients/huber_loss/num_present_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/num_present_grad/add"
  op: "Add"
  input: "huber_loss/num_present/range"
  input: "gradients/huber_loss/num_present_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present_grad/mod"
  op: "FloorMod"
  input: "gradients/huber_loss/num_present_grad/add"
  input: "gradients/huber_loss/num_present_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present_grad/Shape_1"
  op: "Shape"
  input: "gradients/huber_loss/num_present_grad/mod"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/num_present_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present_grad/range"
  op: "Range"
  input: "gradients/huber_loss/num_present_grad/range/start"
  input: "gradients/huber_loss/num_present_grad/Size"
  input: "gradients/huber_loss/num_present_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present_grad/Fill/value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present_grad/Fill"
  op: "Fill"
  input: "gradients/huber_loss/num_present_grad/Shape_1"
  input: "gradients/huber_loss/num_present_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/huber_loss/num_present_grad/range"
  input: "gradients/huber_loss/num_present_grad/mod"
  input: "gradients/huber_loss/num_present_grad/Shape"
  input: "gradients/huber_loss/num_present_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present_grad/Maximum"
  op: "Maximum"
  input: "gradients/huber_loss/num_present_grad/DynamicStitch"
  input: "gradients/huber_loss/num_present_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/huber_loss/num_present_grad/Shape"
  input: "gradients/huber_loss/num_present_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss/Select_grad/tuple/control_dependency_1"
  input: "gradients/huber_loss/num_present_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present_grad/Tile"
  op: "Tile"
  input: "gradients/huber_loss/num_present_grad/Reshape"
  input: "gradients/huber_loss/num_present_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_grad/Shape"
  op: "Shape"
  input: "huber_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_grad/Size"
  op: "Size"
  input: "gradients/huber_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_grad/add"
  op: "Add"
  input: "huber_loss/range"
  input: "gradients/huber_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/huber_loss/Sum_grad/add"
  input: "gradients/huber_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_grad/Shape_1"
  op: "Shape"
  input: "gradients/huber_loss/Sum_grad/mod"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_grad/range"
  op: "Range"
  input: "gradients/huber_loss/Sum_grad/range/start"
  input: "gradients/huber_loss/Sum_grad/Size"
  input: "gradients/huber_loss/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/huber_loss/Sum_grad/Shape_1"
  input: "gradients/huber_loss/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/huber_loss/Sum_grad/range"
  input: "gradients/huber_loss/Sum_grad/mod"
  input: "gradients/huber_loss/Sum_grad/Shape"
  input: "gradients/huber_loss/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/huber_loss/Sum_grad/DynamicStitch"
  input: "gradients/huber_loss/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/huber_loss/Sum_grad/Shape"
  input: "gradients/huber_loss/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss/Sum_1_grad/Tile"
  input: "gradients/huber_loss/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/huber_loss/Sum_grad/Reshape"
  input: "gradients/huber_loss/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present_grad/Shape"
  op: "Shape"
  input: "huber_loss_1/num_present/broadcast_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present_grad/Size"
  op: "Size"
  input: "gradients/huber_loss_1/num_present_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present_grad/add"
  op: "Add"
  input: "huber_loss_1/num_present/range"
  input: "gradients/huber_loss_1/num_present_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present_grad/mod"
  op: "FloorMod"
  input: "gradients/huber_loss_1/num_present_grad/add"
  input: "gradients/huber_loss_1/num_present_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present_grad/Shape_1"
  op: "Shape"
  input: "gradients/huber_loss_1/num_present_grad/mod"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present_grad/range"
  op: "Range"
  input: "gradients/huber_loss_1/num_present_grad/range/start"
  input: "gradients/huber_loss_1/num_present_grad/Size"
  input: "gradients/huber_loss_1/num_present_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present_grad/Fill/value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present_grad/Fill"
  op: "Fill"
  input: "gradients/huber_loss_1/num_present_grad/Shape_1"
  input: "gradients/huber_loss_1/num_present_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/huber_loss_1/num_present_grad/range"
  input: "gradients/huber_loss_1/num_present_grad/mod"
  input: "gradients/huber_loss_1/num_present_grad/Shape"
  input: "gradients/huber_loss_1/num_present_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present_grad/Maximum"
  op: "Maximum"
  input: "gradients/huber_loss_1/num_present_grad/DynamicStitch"
  input: "gradients/huber_loss_1/num_present_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/huber_loss_1/num_present_grad/Shape"
  input: "gradients/huber_loss_1/num_present_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss_1/Select_grad/tuple/control_dependency_1"
  input: "gradients/huber_loss_1/num_present_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present_grad/Tile"
  op: "Tile"
  input: "gradients/huber_loss_1/num_present_grad/Reshape"
  input: "gradients/huber_loss_1/num_present_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_grad/Shape"
  op: "Shape"
  input: "huber_loss_1/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_grad/Size"
  op: "Size"
  input: "gradients/huber_loss_1/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_grad/add"
  op: "Add"
  input: "huber_loss_1/range"
  input: "gradients/huber_loss_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/huber_loss_1/Sum_grad/add"
  input: "gradients/huber_loss_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_grad/Shape_1"
  op: "Shape"
  input: "gradients/huber_loss_1/Sum_grad/mod"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_grad/range"
  op: "Range"
  input: "gradients/huber_loss_1/Sum_grad/range/start"
  input: "gradients/huber_loss_1/Sum_grad/Size"
  input: "gradients/huber_loss_1/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/huber_loss_1/Sum_grad/Shape_1"
  input: "gradients/huber_loss_1/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/huber_loss_1/Sum_grad/range"
  input: "gradients/huber_loss_1/Sum_grad/mod"
  input: "gradients/huber_loss_1/Sum_grad/Shape"
  input: "gradients/huber_loss_1/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/huber_loss_1/Sum_grad/DynamicStitch"
  input: "gradients/huber_loss_1/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/huber_loss_1/Sum_grad/Shape"
  input: "gradients/huber_loss_1/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss_1/Sum_1_grad/Tile"
  input: "gradients/huber_loss_1/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/huber_loss_1/Sum_grad/Reshape"
  input: "gradients/huber_loss_1/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present/broadcast_weights_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present/broadcast_weights_grad/Shape_1"
  op: "Shape"
  input: "huber_loss/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/num_present/broadcast_weights_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss/num_present/broadcast_weights_grad/Shape"
  input: "gradients/huber_loss/num_present/broadcast_weights_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present/broadcast_weights_grad/mul"
  op: "Mul"
  input: "gradients/huber_loss/num_present_grad/Tile"
  input: "huber_loss/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present/broadcast_weights_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss/num_present/broadcast_weights_grad/mul"
  input: "gradients/huber_loss/num_present/broadcast_weights_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/num_present/broadcast_weights_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss/num_present/broadcast_weights_grad/Sum"
  input: "gradients/huber_loss/num_present/broadcast_weights_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present/broadcast_weights_grad/mul_1"
  op: "Mul"
  input: "huber_loss/num_present/Select"
  input: "gradients/huber_loss/num_present_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present/broadcast_weights_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss/num_present/broadcast_weights_grad/mul_1"
  input: "gradients/huber_loss/num_present/broadcast_weights_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/num_present/broadcast_weights_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss/num_present/broadcast_weights_grad/Sum_1"
  input: "gradients/huber_loss/num_present/broadcast_weights_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present/broadcast_weights_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss/num_present/broadcast_weights_grad/Reshape"
  input: "^gradients/huber_loss/num_present/broadcast_weights_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss/num_present/broadcast_weights_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss/num_present/broadcast_weights_grad/Reshape"
  input: "^gradients/huber_loss/num_present/broadcast_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/num_present/broadcast_weights_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present/broadcast_weights_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss/num_present/broadcast_weights_grad/Reshape_1"
  input: "^gradients/huber_loss/num_present/broadcast_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/num_present/broadcast_weights_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Mul_grad/Shape"
  op: "Shape"
  input: "huber_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss/Mul_grad/Shape"
  input: "gradients/huber_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Mul_grad/mul"
  op: "Mul"
  input: "gradients/huber_loss/Sum_grad/Tile"
  input: "huber_loss/ToFloat_3/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss/Mul_grad/mul"
  input: "gradients/huber_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss/Mul_grad/Sum"
  input: "gradients/huber_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Mul_grad/mul_1"
  op: "Mul"
  input: "huber_loss/add"
  input: "gradients/huber_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss/Mul_grad/mul_1"
  input: "gradients/huber_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss/Mul_grad/Sum_1"
  input: "gradients/huber_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss/Mul_grad/Reshape"
  input: "^gradients/huber_loss/Mul_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss/Mul_grad/Reshape"
  input: "^gradients/huber_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss/Mul_grad/Reshape_1"
  input: "^gradients/huber_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present/broadcast_weights_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present/broadcast_weights_grad/Shape_1"
  op: "Shape"
  input: "huber_loss_1/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present/broadcast_weights_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss_1/num_present/broadcast_weights_grad/Shape"
  input: "gradients/huber_loss_1/num_present/broadcast_weights_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present/broadcast_weights_grad/mul"
  op: "Mul"
  input: "gradients/huber_loss_1/num_present_grad/Tile"
  input: "huber_loss_1/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present/broadcast_weights_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss_1/num_present/broadcast_weights_grad/mul"
  input: "gradients/huber_loss_1/num_present/broadcast_weights_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present/broadcast_weights_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss_1/num_present/broadcast_weights_grad/Sum"
  input: "gradients/huber_loss_1/num_present/broadcast_weights_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present/broadcast_weights_grad/mul_1"
  op: "Mul"
  input: "huber_loss_1/num_present/Select"
  input: "gradients/huber_loss_1/num_present_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present/broadcast_weights_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss_1/num_present/broadcast_weights_grad/mul_1"
  input: "gradients/huber_loss_1/num_present/broadcast_weights_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present/broadcast_weights_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss_1/num_present/broadcast_weights_grad/Sum_1"
  input: "gradients/huber_loss_1/num_present/broadcast_weights_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present/broadcast_weights_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss_1/num_present/broadcast_weights_grad/Reshape"
  input: "^gradients/huber_loss_1/num_present/broadcast_weights_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss_1/num_present/broadcast_weights_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss_1/num_present/broadcast_weights_grad/Reshape"
  input: "^gradients/huber_loss_1/num_present/broadcast_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/num_present/broadcast_weights_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present/broadcast_weights_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss_1/num_present/broadcast_weights_grad/Reshape_1"
  input: "^gradients/huber_loss_1/num_present/broadcast_weights_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/num_present/broadcast_weights_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Mul_grad/Shape"
  op: "Shape"
  input: "huber_loss_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss_1/Mul_grad/Shape"
  input: "gradients/huber_loss_1/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Mul_grad/mul"
  op: "Mul"
  input: "gradients/huber_loss_1/Sum_grad/Tile"
  input: "huber_loss_1/ToFloat_3/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss_1/Mul_grad/mul"
  input: "gradients/huber_loss_1/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss_1/Mul_grad/Sum"
  input: "gradients/huber_loss_1/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Mul_grad/mul_1"
  op: "Mul"
  input: "huber_loss_1/add"
  input: "gradients/huber_loss_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss_1/Mul_grad/mul_1"
  input: "gradients/huber_loss_1/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss_1/Mul_grad/Sum_1"
  input: "gradients/huber_loss_1/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss_1/Mul_grad/Reshape"
  input: "^gradients/huber_loss_1/Mul_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss_1/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss_1/Mul_grad/Reshape"
  input: "^gradients/huber_loss_1/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss_1/Mul_grad/Reshape_1"
  input: "^gradients/huber_loss_1/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present/broadcast_weights/ones_like_grad/Rank"
  op: "Rank"
  input: "gradients/huber_loss/num_present/broadcast_weights_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present/broadcast_weights/ones_like_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present/broadcast_weights/ones_like_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present/broadcast_weights/ones_like_grad/range"
  op: "Range"
  input: "gradients/huber_loss/num_present/broadcast_weights/ones_like_grad/range/start"
  input: "gradients/huber_loss/num_present/broadcast_weights/ones_like_grad/Rank"
  input: "gradients/huber_loss/num_present/broadcast_weights/ones_like_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/num_present/broadcast_weights/ones_like_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss/num_present/broadcast_weights_grad/tuple/control_dependency_1"
  input: "gradients/huber_loss/num_present/broadcast_weights/ones_like_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present/broadcast_weights/ones_like_grad/Rank"
  op: "Rank"
  input: "gradients/huber_loss_1/num_present/broadcast_weights_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present/broadcast_weights/ones_like_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present/broadcast_weights/ones_like_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present/broadcast_weights/ones_like_grad/range"
  op: "Range"
  input: "gradients/huber_loss_1/num_present/broadcast_weights/ones_like_grad/range/start"
  input: "gradients/huber_loss_1/num_present/broadcast_weights/ones_like_grad/Rank"
  input: "gradients/huber_loss_1/num_present/broadcast_weights/ones_like_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/num_present/broadcast_weights/ones_like_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss_1/num_present/broadcast_weights_grad/tuple/control_dependency_1"
  input: "gradients/huber_loss_1/num_present/broadcast_weights/ones_like_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/add_grad/Shape"
  op: "Shape"
  input: "huber_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/add_grad/Shape_1"
  op: "Shape"
  input: "huber_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss/add_grad/Shape"
  input: "gradients/huber_loss/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/add_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss/Mul_grad/tuple/control_dependency"
  input: "gradients/huber_loss/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss/add_grad/Sum"
  input: "gradients/huber_loss/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss/Mul_grad/tuple/control_dependency"
  input: "gradients/huber_loss/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss/add_grad/Sum_1"
  input: "gradients/huber_loss/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss/add_grad/Reshape"
  input: "^gradients/huber_loss/add_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss/add_grad/Reshape"
  input: "^gradients/huber_loss/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss/add_grad/Reshape_1"
  input: "^gradients/huber_loss/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/add_grad/Shape"
  op: "Shape"
  input: "huber_loss_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/add_grad/Shape_1"
  op: "Shape"
  input: "huber_loss_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss_1/add_grad/Shape"
  input: "gradients/huber_loss_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/add_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss_1/Mul_grad/tuple/control_dependency"
  input: "gradients/huber_loss_1/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss_1/add_grad/Sum"
  input: "gradients/huber_loss_1/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss_1/Mul_grad/tuple/control_dependency"
  input: "gradients/huber_loss_1/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss_1/add_grad/Sum_1"
  input: "gradients/huber_loss_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss_1/add_grad/Reshape"
  input: "^gradients/huber_loss_1/add_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss_1/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss_1/add_grad/Reshape"
  input: "^gradients/huber_loss_1/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss_1/add_grad/Reshape_1"
  input: "^gradients/huber_loss_1/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "huber_loss/pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss/mul_grad/Shape"
  input: "gradients/huber_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/mul_grad/mul"
  op: "Mul"
  input: "gradients/huber_loss/add_grad/tuple/control_dependency"
  input: "huber_loss/pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/mul_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss/mul_grad/mul"
  input: "gradients/huber_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss/mul_grad/Sum"
  input: "gradients/huber_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/mul_grad/mul_1"
  op: "Mul"
  input: "huber_loss/mul/x"
  input: "gradients/huber_loss/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss/mul_grad/mul_1"
  input: "gradients/huber_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss/mul_grad/Sum_1"
  input: "gradients/huber_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss/mul_grad/Reshape"
  input: "^gradients/huber_loss/mul_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss/mul_grad/Reshape"
  input: "^gradients/huber_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss/mul_grad/Reshape_1"
  input: "^gradients/huber_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/mul_1_grad/Shape_1"
  op: "Shape"
  input: "huber_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss/mul_1_grad/Shape"
  input: "gradients/huber_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/mul_1_grad/mul"
  op: "Mul"
  input: "gradients/huber_loss/add_grad/tuple/control_dependency_1"
  input: "huber_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss/mul_1_grad/mul"
  input: "gradients/huber_loss/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss/mul_1_grad/Sum"
  input: "gradients/huber_loss/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/mul_1_grad/mul_1"
  op: "Mul"
  input: "huber_loss/mul_1/x"
  input: "gradients/huber_loss/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss/mul_1_grad/mul_1"
  input: "gradients/huber_loss/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss/mul_1_grad/Sum_1"
  input: "gradients/huber_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss/mul_1_grad/Reshape"
  input: "^gradients/huber_loss/mul_1_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss/mul_1_grad/Reshape"
  input: "^gradients/huber_loss/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss/mul_1_grad/Reshape_1"
  input: "^gradients/huber_loss/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_grad/Shape_1"
  op: "Shape"
  input: "huber_loss_1/pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss_1/mul_grad/Shape"
  input: "gradients/huber_loss_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_grad/mul"
  op: "Mul"
  input: "gradients/huber_loss_1/add_grad/tuple/control_dependency"
  input: "huber_loss_1/pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss_1/mul_grad/mul"
  input: "gradients/huber_loss_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss_1/mul_grad/Sum"
  input: "gradients/huber_loss_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_grad/mul_1"
  op: "Mul"
  input: "huber_loss_1/mul/x"
  input: "gradients/huber_loss_1/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss_1/mul_grad/mul_1"
  input: "gradients/huber_loss_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss_1/mul_grad/Sum_1"
  input: "gradients/huber_loss_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss_1/mul_grad/Reshape"
  input: "^gradients/huber_loss_1/mul_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss_1/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss_1/mul_grad/Reshape"
  input: "^gradients/huber_loss_1/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss_1/mul_grad/Reshape_1"
  input: "^gradients/huber_loss_1/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_1_grad/Shape_1"
  op: "Shape"
  input: "huber_loss_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss_1/mul_1_grad/Shape"
  input: "gradients/huber_loss_1/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_1_grad/mul"
  op: "Mul"
  input: "gradients/huber_loss_1/add_grad/tuple/control_dependency_1"
  input: "huber_loss_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss_1/mul_1_grad/mul"
  input: "gradients/huber_loss_1/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss_1/mul_1_grad/Sum"
  input: "gradients/huber_loss_1/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_1_grad/mul_1"
  op: "Mul"
  input: "huber_loss_1/mul_1/x"
  input: "gradients/huber_loss_1/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss_1/mul_1_grad/mul_1"
  input: "gradients/huber_loss_1/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss_1/mul_1_grad/Sum_1"
  input: "gradients/huber_loss_1/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss_1/mul_1_grad/Reshape"
  input: "^gradients/huber_loss_1/mul_1_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss_1/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss_1/mul_1_grad/Reshape"
  input: "^gradients/huber_loss_1/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss_1/mul_1_grad/Reshape_1"
  input: "^gradients/huber_loss_1/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/Shape"
  op: "Shape"
  input: "huber_loss/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss/pow_grad/Shape"
  input: "gradients/huber_loss/pow_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/mul"
  op: "Mul"
  input: "gradients/huber_loss/mul_grad/tuple/control_dependency_1"
  input: "huber_loss/pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/sub"
  op: "Sub"
  input: "huber_loss/pow/y"
  input: "gradients/huber_loss/pow_grad/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/Pow"
  op: "Pow"
  input: "huber_loss/Minimum"
  input: "gradients/huber_loss/pow_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/mul_1"
  op: "Mul"
  input: "gradients/huber_loss/pow_grad/mul"
  input: "gradients/huber_loss/pow_grad/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss/pow_grad/mul_1"
  input: "gradients/huber_loss/pow_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss/pow_grad/Sum"
  input: "gradients/huber_loss/pow_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/Greater/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/Greater"
  op: "Greater"
  input: "huber_loss/Minimum"
  input: "gradients/huber_loss/pow_grad/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/Log"
  op: "Log"
  input: "huber_loss/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/zeros_like"
  op: "ZerosLike"
  input: "huber_loss/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/Select"
  op: "Select"
  input: "gradients/huber_loss/pow_grad/Greater"
  input: "gradients/huber_loss/pow_grad/Log"
  input: "gradients/huber_loss/pow_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/mul_2"
  op: "Mul"
  input: "gradients/huber_loss/mul_grad/tuple/control_dependency_1"
  input: "huber_loss/pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/mul_3"
  op: "Mul"
  input: "gradients/huber_loss/pow_grad/mul_2"
  input: "gradients/huber_loss/pow_grad/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss/pow_grad/mul_3"
  input: "gradients/huber_loss/pow_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss/pow_grad/Sum_1"
  input: "gradients/huber_loss/pow_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss/pow_grad/Reshape"
  input: "^gradients/huber_loss/pow_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss/pow_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss/pow_grad/Reshape"
  input: "^gradients/huber_loss/pow_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/pow_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/pow_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss/pow_grad/Reshape_1"
  input: "^gradients/huber_loss/pow_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/pow_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/sub_grad/Shape"
  op: "Shape"
  input: "huber_loss/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "huber_loss/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss/sub_grad/Shape"
  input: "gradients/huber_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/sub_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/huber_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss/sub_grad/Sum"
  input: "gradients/huber_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/huber_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/sub_grad/Neg"
  op: "Neg"
  input: "gradients/huber_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss/sub_grad/Neg"
  input: "gradients/huber_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss/sub_grad/Reshape"
  input: "^gradients/huber_loss/sub_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss/sub_grad/Reshape"
  input: "^gradients/huber_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss/sub_grad/Reshape_1"
  input: "^gradients/huber_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/Shape"
  op: "Shape"
  input: "huber_loss_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss_1/pow_grad/Shape"
  input: "gradients/huber_loss_1/pow_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/mul"
  op: "Mul"
  input: "gradients/huber_loss_1/mul_grad/tuple/control_dependency_1"
  input: "huber_loss_1/pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/sub"
  op: "Sub"
  input: "huber_loss_1/pow/y"
  input: "gradients/huber_loss_1/pow_grad/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/Pow"
  op: "Pow"
  input: "huber_loss_1/Minimum"
  input: "gradients/huber_loss_1/pow_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/mul_1"
  op: "Mul"
  input: "gradients/huber_loss_1/pow_grad/mul"
  input: "gradients/huber_loss_1/pow_grad/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss_1/pow_grad/mul_1"
  input: "gradients/huber_loss_1/pow_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss_1/pow_grad/Sum"
  input: "gradients/huber_loss_1/pow_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/Greater/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/Greater"
  op: "Greater"
  input: "huber_loss_1/Minimum"
  input: "gradients/huber_loss_1/pow_grad/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/Log"
  op: "Log"
  input: "huber_loss_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/zeros_like"
  op: "ZerosLike"
  input: "huber_loss_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/Select"
  op: "Select"
  input: "gradients/huber_loss_1/pow_grad/Greater"
  input: "gradients/huber_loss_1/pow_grad/Log"
  input: "gradients/huber_loss_1/pow_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/mul_2"
  op: "Mul"
  input: "gradients/huber_loss_1/mul_grad/tuple/control_dependency_1"
  input: "huber_loss_1/pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/mul_3"
  op: "Mul"
  input: "gradients/huber_loss_1/pow_grad/mul_2"
  input: "gradients/huber_loss_1/pow_grad/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss_1/pow_grad/mul_3"
  input: "gradients/huber_loss_1/pow_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss_1/pow_grad/Sum_1"
  input: "gradients/huber_loss_1/pow_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss_1/pow_grad/Reshape"
  input: "^gradients/huber_loss_1/pow_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss_1/pow_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss_1/pow_grad/Reshape"
  input: "^gradients/huber_loss_1/pow_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/pow_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/pow_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss_1/pow_grad/Reshape_1"
  input: "^gradients/huber_loss_1/pow_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/pow_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/sub_grad/Shape"
  op: "Shape"
  input: "huber_loss_1/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/sub_grad/Shape_1"
  op: "Shape"
  input: "huber_loss_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss_1/sub_grad/Shape"
  input: "gradients/huber_loss_1/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/sub_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss_1/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/huber_loss_1/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss_1/sub_grad/Sum"
  input: "gradients/huber_loss_1/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss_1/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/huber_loss_1/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/sub_grad/Neg"
  op: "Neg"
  input: "gradients/huber_loss_1/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss_1/sub_grad/Neg"
  input: "gradients/huber_loss_1/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss_1/sub_grad/Reshape"
  input: "^gradients/huber_loss_1/sub_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss_1/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss_1/sub_grad/Reshape"
  input: "^gradients/huber_loss_1/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss_1/sub_grad/Reshape_1"
  input: "^gradients/huber_loss_1/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/huber_loss/pow_grad/tuple/control_dependency"
  input: "gradients/huber_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/pow_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Minimum_grad/Shape"
  op: "Shape"
  input: "huber_loss/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Minimum_grad/Shape_2"
  op: "Shape"
  input: "gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Minimum_grad/zeros"
  op: "Fill"
  input: "gradients/huber_loss/Minimum_grad/Shape_2"
  input: "gradients/huber_loss/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "huber_loss/Abs"
  input: "huber_loss/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss/Minimum_grad/Shape"
  input: "gradients/huber_loss/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Minimum_grad/Select"
  op: "Select"
  input: "gradients/huber_loss/Minimum_grad/LessEqual"
  input: "gradients/AddN_2"
  input: "gradients/huber_loss/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Minimum_grad/LogicalNot"
  op: "LogicalNot"
  input: "gradients/huber_loss/Minimum_grad/LessEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Minimum_grad/Select_1"
  op: "Select"
  input: "gradients/huber_loss/Minimum_grad/LogicalNot"
  input: "gradients/AddN_2"
  input: "gradients/huber_loss/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Minimum_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss/Minimum_grad/Select"
  input: "gradients/huber_loss/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/Minimum_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss/Minimum_grad/Sum"
  input: "gradients/huber_loss/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Minimum_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss/Minimum_grad/Select_1"
  input: "gradients/huber_loss/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss/Minimum_grad/Sum_1"
  input: "gradients/huber_loss/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Minimum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss/Minimum_grad/Reshape"
  input: "^gradients/huber_loss/Minimum_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss/Minimum_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss/Minimum_grad/Reshape"
  input: "^gradients/huber_loss/Minimum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/Minimum_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Minimum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss/Minimum_grad/Reshape_1"
  input: "^gradients/huber_loss/Minimum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/Minimum_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/huber_loss_1/pow_grad/tuple/control_dependency"
  input: "gradients/huber_loss_1/sub_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/pow_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Minimum_grad/Shape"
  op: "Shape"
  input: "huber_loss_1/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Minimum_grad/zeros"
  op: "Fill"
  input: "gradients/huber_loss_1/Minimum_grad/Shape_2"
  input: "gradients/huber_loss_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "huber_loss_1/Abs"
  input: "huber_loss_1/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss_1/Minimum_grad/Shape"
  input: "gradients/huber_loss_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Minimum_grad/Select"
  op: "Select"
  input: "gradients/huber_loss_1/Minimum_grad/LessEqual"
  input: "gradients/AddN_3"
  input: "gradients/huber_loss_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Minimum_grad/LogicalNot"
  op: "LogicalNot"
  input: "gradients/huber_loss_1/Minimum_grad/LessEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Minimum_grad/Select_1"
  op: "Select"
  input: "gradients/huber_loss_1/Minimum_grad/LogicalNot"
  input: "gradients/AddN_3"
  input: "gradients/huber_loss_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Minimum_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss_1/Minimum_grad/Select"
  input: "gradients/huber_loss_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss_1/Minimum_grad/Sum"
  input: "gradients/huber_loss_1/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss_1/Minimum_grad/Select_1"
  input: "gradients/huber_loss_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss_1/Minimum_grad/Sum_1"
  input: "gradients/huber_loss_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Minimum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss_1/Minimum_grad/Reshape"
  input: "^gradients/huber_loss_1/Minimum_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss_1/Minimum_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss_1/Minimum_grad/Reshape"
  input: "^gradients/huber_loss_1/Minimum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/Minimum_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Minimum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss_1/Minimum_grad/Reshape_1"
  input: "^gradients/huber_loss_1/Minimum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/Minimum_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/huber_loss/sub_grad/tuple/control_dependency"
  input: "gradients/huber_loss/Minimum_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Abs_grad/Sign"
  op: "Sign"
  input: "huber_loss/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Abs_grad/mul"
  op: "Mul"
  input: "gradients/AddN_4"
  input: "gradients/huber_loss/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/huber_loss_1/sub_grad/tuple/control_dependency"
  input: "gradients/huber_loss_1/Minimum_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Abs_grad/Sign"
  op: "Sign"
  input: "huber_loss_1/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Abs_grad/mul"
  op: "Mul"
  input: "gradients/AddN_5"
  input: "gradients/huber_loss_1/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sub_grad/Shape"
  op: "Shape"
  input: "syntax_2/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss/Sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss/Sub_grad/Shape"
  input: "gradients/huber_loss/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sub_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss/Abs_grad/mul"
  input: "gradients/huber_loss/Sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/Sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss/Sub_grad/Sum"
  input: "gradients/huber_loss/Sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss/Abs_grad/mul"
  input: "gradients/huber_loss/Sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss/Sub_grad/Neg"
  op: "Neg"
  input: "gradients/huber_loss/Sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss/Sub_grad/Neg"
  input: "gradients/huber_loss/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss/Sub_grad/Reshape"
  input: "^gradients/huber_loss/Sub_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss/Sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss/Sub_grad/Reshape"
  input: "^gradients/huber_loss/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/Sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss/Sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss/Sub_grad/Reshape_1"
  input: "^gradients/huber_loss/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss/Sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sub_grad/Shape"
  op: "Shape"
  input: "syntax_2_1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/huber_loss_1/Sub_grad/Shape"
  input: "gradients/huber_loss_1/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sub_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss_1/Abs_grad/mul"
  input: "gradients/huber_loss_1/Sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/huber_loss_1/Sub_grad/Sum"
  input: "gradients/huber_loss_1/Sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss_1/Abs_grad/mul"
  input: "gradients/huber_loss_1/Sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sub_grad/Neg"
  op: "Neg"
  input: "gradients/huber_loss_1/Sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/huber_loss_1/Sub_grad/Neg"
  input: "gradients/huber_loss_1/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/huber_loss_1/Sub_grad/Reshape"
  input: "^gradients/huber_loss_1/Sub_grad/Reshape_1"
}
node {
  name: "gradients/huber_loss_1/Sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/huber_loss_1/Sub_grad/Reshape"
  input: "^gradients/huber_loss_1/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/Sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/huber_loss_1/Sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/huber_loss_1/Sub_grad/Reshape_1"
  input: "^gradients/huber_loss_1/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/huber_loss_1/Sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/Add_grad/Shape"
  op: "Shape"
  input: "syntax_2/Tensordot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_2/Add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/syntax_2/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_2/Add_grad/Shape"
  input: "gradients/syntax_2/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/Add_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss/Sub_grad/tuple/control_dependency"
  input: "gradients/syntax_2/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_2/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_2/Add_grad/Sum"
  input: "gradients/syntax_2/Add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss/Sub_grad/tuple/control_dependency"
  input: "gradients/syntax_2/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_2/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_2/Add_grad/Sum_1"
  input: "gradients/syntax_2/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_2/Add_grad/Reshape"
  input: "^gradients/syntax_2/Add_grad/Reshape_1"
}
node {
  name: "gradients/syntax_2/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_2/Add_grad/Reshape"
  input: "^gradients/syntax_2/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_2/Add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_2/Add_grad/Reshape_1"
  input: "^gradients/syntax_2/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_2/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/Add_grad/Shape"
  op: "Shape"
  input: "syntax_2_1/Tensordot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_2_1/Add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_2_1/Add_grad/Shape"
  input: "gradients/syntax_2_1/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/Add_grad/Sum"
  op: "Sum"
  input: "gradients/huber_loss_1/Sub_grad/tuple/control_dependency"
  input: "gradients/syntax_2_1/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_2_1/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_2_1/Add_grad/Sum"
  input: "gradients/syntax_2_1/Add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/huber_loss_1/Sub_grad/tuple/control_dependency"
  input: "gradients/syntax_2_1/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_2_1/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_2_1/Add_grad/Sum_1"
  input: "gradients/syntax_2_1/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_2_1/Add_grad/Reshape"
  input: "^gradients/syntax_2_1/Add_grad/Reshape_1"
}
node {
  name: "gradients/syntax_2_1/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_2_1/Add_grad/Reshape"
  input: "^gradients/syntax_2_1/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_2_1/Add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_2_1/Add_grad/Reshape_1"
  input: "^gradients/syntax_2_1/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_2_1/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/Tensordot_grad/Shape"
  op: "Shape"
  input: "syntax_2/Tensordot/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_2/Tensordot_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_2/Add_grad/tuple/control_dependency"
  input: "gradients/syntax_2/Tensordot_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/Tensordot_grad/Shape"
  op: "Shape"
  input: "syntax_2_1/Tensordot/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_2_1/Tensordot_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_2_1/Add_grad/tuple/control_dependency"
  input: "gradients/syntax_2_1/Tensordot_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_6"
  op: "AddN"
  input: "gradients/syntax_2/Add_grad/tuple/control_dependency_1"
  input: "gradients/syntax_2_1/Add_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_2/Add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/Tensordot/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/syntax_2/Tensordot_grad/Reshape"
  input: "syntax_2/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/syntax_2/Tensordot/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "syntax_2/Tensordot/Reshape"
  input: "gradients/syntax_2/Tensordot_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_2/Tensordot/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_2/Tensordot/MatMul_grad/MatMul"
  input: "^gradients/syntax_2/Tensordot/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/syntax_2/Tensordot/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_2/Tensordot/MatMul_grad/MatMul"
  input: "^gradients/syntax_2/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_2/Tensordot/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/Tensordot/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_2/Tensordot/MatMul_grad/MatMul_1"
  input: "^gradients/syntax_2/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_2/Tensordot/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/Tensordot/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/syntax_2_1/Tensordot_grad/Reshape"
  input: "syntax_2_1/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/syntax_2_1/Tensordot/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "syntax_2_1/Tensordot/Reshape"
  input: "gradients/syntax_2_1/Tensordot_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_2_1/Tensordot/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_2_1/Tensordot/MatMul_grad/MatMul"
  input: "^gradients/syntax_2_1/Tensordot/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/syntax_2_1/Tensordot/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_2_1/Tensordot/MatMul_grad/MatMul"
  input: "^gradients/syntax_2_1/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_2_1/Tensordot/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/Tensordot/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_2_1/Tensordot/MatMul_grad/MatMul_1"
  input: "^gradients/syntax_2_1/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_2_1/Tensordot/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/Tensordot/Reshape_grad/Shape"
  op: "Shape"
  input: "syntax_2/Tensordot/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_2/Tensordot/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_2/Tensordot/MatMul_grad/tuple/control_dependency"
  input: "gradients/syntax_2/Tensordot/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/Tensordot/Reshape_1_grad/Shape"
  op: "Shape"
  input: "syntax_2/Tensordot/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_2/Tensordot/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_2/Tensordot/MatMul_grad/tuple/control_dependency_1"
  input: "gradients/syntax_2/Tensordot/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/Tensordot/Reshape_grad/Shape"
  op: "Shape"
  input: "syntax_2_1/Tensordot/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_2_1/Tensordot/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_2_1/Tensordot/MatMul_grad/tuple/control_dependency"
  input: "gradients/syntax_2_1/Tensordot/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/Tensordot/Reshape_1_grad/Shape"
  op: "Shape"
  input: "syntax_2_1/Tensordot/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_2_1/Tensordot/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_2_1/Tensordot/MatMul_grad/tuple/control_dependency_1"
  input: "gradients/syntax_2_1/Tensordot/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/Tensordot/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "syntax_2/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/Tensordot/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/syntax_2/Tensordot/Reshape_grad/Reshape"
  input: "gradients/syntax_2/Tensordot/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/Tensordot/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "syntax_2/Tensordot/concat_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/Tensordot/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/syntax_2/Tensordot/Reshape_1_grad/Reshape"
  input: "gradients/syntax_2/Tensordot/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/Tensordot/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "syntax_2_1/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/Tensordot/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/syntax_2_1/Tensordot/Reshape_grad/Reshape"
  input: "gradients/syntax_2_1/Tensordot/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/Tensordot/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "syntax_2_1/Tensordot/concat_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/Tensordot/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/syntax_2_1/Tensordot/Reshape_1_grad/Reshape"
  input: "gradients/syntax_2_1/Tensordot/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/syntax_2/concat_grad/mod"
  op: "FloorMod"
  input: "syntax_2/concat/axis"
  input: "gradients/syntax_2/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: " \000\000\000@\000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_2/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: " \000\000\000@\000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_2/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/syntax_2/concat_grad/mod"
  input: "gradients/syntax_2/concat_grad/Shape"
  input: "gradients/syntax_2/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/concat_grad/Slice"
  op: "Slice"
  input: "gradients/syntax_2/Tensordot/transpose_grad/transpose"
  input: "gradients/syntax_2/concat_grad/ConcatOffset"
  input: "gradients/syntax_2/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/syntax_2/Tensordot/transpose_grad/transpose"
  input: "gradients/syntax_2/concat_grad/ConcatOffset:1"
  input: "gradients/syntax_2/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_2/concat_grad/Slice"
  input: "^gradients/syntax_2/concat_grad/Slice_1"
}
node {
  name: "gradients/syntax_2/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_2/concat_grad/Slice"
  input: "^gradients/syntax_2/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_2/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_2/concat_grad/Slice_1"
  input: "^gradients/syntax_2/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_2/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/concat_grad/mod"
  op: "FloorMod"
  input: "syntax_2_1/concat/axis"
  input: "gradients/syntax_2_1/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: " \000\000\000@\000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: " \000\000\000@\000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/syntax_2_1/concat_grad/mod"
  input: "gradients/syntax_2_1/concat_grad/Shape"
  input: "gradients/syntax_2_1/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/concat_grad/Slice"
  op: "Slice"
  input: "gradients/syntax_2_1/Tensordot/transpose_grad/transpose"
  input: "gradients/syntax_2_1/concat_grad/ConcatOffset"
  input: "gradients/syntax_2_1/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/syntax_2_1/Tensordot/transpose_grad/transpose"
  input: "gradients/syntax_2_1/concat_grad/ConcatOffset:1"
  input: "gradients/syntax_2_1/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_2_1/concat_grad/Slice"
  input: "^gradients/syntax_2_1/concat_grad/Slice_1"
}
node {
  name: "gradients/syntax_2_1/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_2_1/concat_grad/Slice"
  input: "^gradients/syntax_2_1/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_2_1/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_2_1/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_2_1/concat_grad/Slice_1"
  input: "^gradients/syntax_2_1/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_2_1/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_7"
  op: "AddN"
  input: "gradients/syntax_2/Tensordot/transpose_1_grad/transpose"
  input: "gradients/syntax_2_1/Tensordot/transpose_1_grad/transpose"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_2/Tensordot/transpose_1_grad/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "syntax_1/bidirectional_rnn/fw/fw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/syntax_2/concat_grad/tuple/control_dependency"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/syntax_2/concat_grad/tuple/control_dependency_1"
  input: "shuffle_batch:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/syntax_2_1/concat_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/syntax_2_1/concat_grad/tuple/control_dependency_1"
  input: "shuffle_batch:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArray"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Exit_1"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "syntax_1/bidirectional_rnn/bw/bw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/syntax_1/ReverseSequence_grad/ReverseSequence"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArray"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Exit_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/syntax_1_1/ReverseSequence_grad/ReverseSequence"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArray"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Exit_1"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArray"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Exit_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/zeros_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/zeros_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Exit_1_grad/b_exit"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Exit_1_grad/b_exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch:1"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch:1"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Exit_1_grad/b_exit"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch:1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch:1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Exit_1_grad/b_exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch:1"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch:1"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch:1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch:1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/RefEnter"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/RefEnter"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  input: "^gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPop/RefEnter"
  input: "^gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual_2"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPop/RefEnter"
  input: "^gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/RefEnter"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  input: "^gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/RefEnter"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual_1"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPop/RefEnter"
  input: "^gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/RefEnter"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual_2"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPop/RefEnter"
  input: "^gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/StackPop/RefEnter"
  input: "^gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  input: "^gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual_1"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPop/RefEnter"
  input: "^gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual_2"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPop/RefEnter"
  input: "^gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_8"
  op: "AddN"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Shape"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/RefEnter"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "gradients/AddN_8"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Sum"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/RefEnter"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop"
  input: "gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Sum_1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Reshape_1"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/RefEnter"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/StackPop/RefEnter"
  input: "^gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_9"
  op: "AddN"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Shape"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "gradients/AddN_9"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop"
  input: "gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Sum_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Reshape_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/StackPop/RefEnter"
  input: "^gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_10"
  op: "AddN"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Shape"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/RefEnter"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "gradients/AddN_10"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Sum"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/RefEnter"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop"
  input: "gradients/AddN_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Sum_1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Reshape_1"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_11"
  op: "AddN"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Shape"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "gradients/AddN_11"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop"
  input: "gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Sum_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Reshape_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_12"
  op: "AddN"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Shape"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_12"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Sum"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_12"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Sum_1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Reshape_1"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_13"
  op: "AddN"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Shape"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_13"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_13"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Sum_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Reshape_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul_1/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/mul/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Shape"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/RefEnter"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/Identity_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Sum"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/RefEnter"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Sum_1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Reshape_1"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Shape"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/RefEnter"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Sum"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/RefEnter"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Sum_1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Reshape_1"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_14"
  op: "AddN"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Shape"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_14"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Sum"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_14"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Sum_1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Reshape_1"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Shape"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/Identity_2"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Sum_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Reshape_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Shape"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Sum_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Reshape_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_15"
  op: "AddN"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Shape"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_15"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_15"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Sum_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Reshape_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_16"
  op: "AddN"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Shape"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/RefEnter"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/Identity_2"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Sum"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/RefEnter"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Sum_1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Reshape_1"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Shape"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/RefEnter"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Sum"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/RefEnter"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Sum_1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Reshape_1"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_17"
  op: "AddN"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Shape"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/Identity_2"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Sum_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Reshape_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Shape"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Sum_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Reshape_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Shape"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Sum"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Sum_1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Reshape_1"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_18"
  op: "AddN"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Shape"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Sum_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Reshape_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/mul_1/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_19"
  op: "AddN"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul_1/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/mul/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/RefEnter"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split/split_dim"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/tuple/control_dependency"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/StackPop"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Shape"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Sum"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Sum_1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Reshape"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Reshape_1"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split/split_dim"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/StackPop/RefEnter"
  input: "^gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/add_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat/StackPop"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Shape"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Sum_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Reshape"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Reshape_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/RefEnter"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split/split_dim"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/StackPop/RefEnter"
  input: "^gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/tuple/control_dependency"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/StackPop"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split/split_dim"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/StackPop/RefEnter"
  input: "^gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split/split_dim"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/add_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat/StackPop"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/RefEnter"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop/RefEnter"
  input: "^gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/RefEnter"
  input: "syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice_1"
  input: "^gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/syntax_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/RefEnter"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop/RefEnter"
  input: "^gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop/RefEnter"
  input: "^gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_20"
  op: "AddN"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop/RefEnter"
  input: "^gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_21"
  op: "AddN"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/RefEnter"
  input: "syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop/RefEnter"
  input: "^gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice_1"
  input: "^gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/syntax_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_22"
  op: "AddN"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_23"
  op: "AddN"
  input: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_3"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/fw/fw/while/fw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPush"
  op: "StackPush"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/RefEnter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop"
  op: "StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop/RefEnter"
  input: "^gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat/axis"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/mod"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_24"
  op: "AddN"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_25"
  op: "AddN"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/syntax_1_1/bidirectional_rnn/fw/fw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_26"
  op: "AddN"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_27"
  op: "AddN"
  input: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_3"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1/bidirectional_rnn/bw/bw/while/bw/lstm_cell/lstm_cell/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/syntax_1_1/bidirectional_rnn/bw/bw/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "syntax_1_1/bidirectional_rnn/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1_1/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "syntax_1_1/bidirectional_rnn/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "gradients/syntax_1_1/bidirectional_rnn/bw/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/transpose_grad/transpose"
  input: "shuffle_batch:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/AddN_28"
  op: "AddN"
  input: "gradients/syntax_1_1/bidirectional_rnn/fw/transpose_grad/transpose"
  input: "gradients/syntax_1_1/bidirectional_rnn/bw/ReverseSequence_grad/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/syntax_1_1/bidirectional_rnn/fw/transpose_grad/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
        dim {
          size: 800
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
        dim {
          size: 800
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 800
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 800
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
        dim {
          size: 800
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
        dim {
          size: 800
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 800
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 800
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 800
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/syntax_2_weights/Adam/Initializer/zeros"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_2/syntax_2_weights/Adam"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_2/syntax_2_weights/Adam/Assign"
  op: "Assign"
  input: "syntax_2/syntax_2_weights/Adam"
  input: "syntax_2/syntax_2_weights/Adam/Initializer/zeros"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_2/syntax_2_weights/Adam/read"
  op: "Identity"
  input: "syntax_2/syntax_2_weights/Adam"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/syntax_2_weights/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_2/syntax_2_weights/Adam_1"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 400
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_2/syntax_2_weights/Adam_1/Assign"
  op: "Assign"
  input: "syntax_2/syntax_2_weights/Adam_1"
  input: "syntax_2/syntax_2_weights/Adam_1/Initializer/zeros"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_2/syntax_2_weights/Adam_1/read"
  op: "Identity"
  input: "syntax_2/syntax_2_weights/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/syntax_2_biases/Adam/Initializer/zeros"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_2/syntax_2_biases/Adam"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_2/syntax_2_biases/Adam/Assign"
  op: "Assign"
  input: "syntax_2/syntax_2_biases/Adam"
  input: "syntax_2/syntax_2_biases/Adam/Initializer/zeros"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_2/syntax_2_biases/Adam/read"
  op: "Identity"
  input: "syntax_2/syntax_2_biases/Adam"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "syntax_2/syntax_2_biases/Adam_1/Initializer/zeros"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "syntax_2/syntax_2_biases/Adam_1"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "syntax_2/syntax_2_biases/Adam_1/Assign"
  op: "Assign"
  input: "syntax_2/syntax_2_biases/Adam_1"
  input: "syntax_2/syntax_2_biases/Adam_1/Initializer/zeros"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "syntax_2/syntax_2_biases/Adam_1/read"
  op: "Identity"
  input: "syntax_2/syntax_2_biases/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_syntax_1/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_syntax_1/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_syntax_2/syntax_2_weights/ApplyAdam"
  op: "ApplyAdam"
  input: "syntax_2/syntax_2_weights"
  input: "syntax_2/syntax_2_weights/Adam"
  input: "syntax_2/syntax_2_weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_7"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_syntax_2/syntax_2_biases/ApplyAdam"
  op: "ApplyAdam"
  input: "syntax_2/syntax_2_biases"
  input: "syntax_2/syntax_2_biases/Adam"
  input: "syntax_2/syntax_2_biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_6"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_syntax_1/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_syntax_1/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_syntax_2/syntax_2_weights/ApplyAdam"
  input: "^Adam/update_syntax_2/syntax_2_biases/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_syntax_1/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_syntax_1/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_syntax_2/syntax_2_weights/ApplyAdam"
  input: "^Adam/update_syntax_2/syntax_2_biases/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update/NoOp"
  op: "NoOp"
  input: "^Adam/update_syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_syntax_1/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/update_syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdam"
  input: "^Adam/update_syntax_1/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdam"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
}
node {
  name: "Adam/update/NoOp_1"
  op: "NoOp"
  input: "^Adam/update_syntax_2/syntax_2_weights/ApplyAdam"
  input: "^Adam/update_syntax_2/syntax_2_biases/ApplyAdam"
  device: "/device:CPU:0"
}
node {
  name: "Adam/update"
  op: "NoOp"
  input: "^Adam/update/NoOp"
  input: "^Adam/update/NoOp_1"
}
node {
  name: "Adam/value"
  op: "Const"
  input: "^Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "Variable"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "global_step"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
        string_val: "syntax_2/syntax_2_biases"
        string_val: "syntax_2/syntax_2_biases/Adam"
        string_val: "syntax_2/syntax_2_biases/Adam_1"
        string_val: "syntax_2/syntax_2_weights"
        string_val: "syntax_2/syntax_2_weights/Adam"
        string_val: "syntax_2/syntax_2_weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "Variable"
  input: "beta1_power"
  input: "beta2_power"
  input: "global_step"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  input: "syntax_2/syntax_2_biases"
  input: "syntax_2/syntax_2_biases/Adam"
  input: "syntax_2/syntax_2_biases/Adam_1"
  input: "syntax_2/syntax_2_weights"
  input: "syntax_2/syntax_2_weights/Adam"
  input: "syntax_2/syntax_2_weights/Adam_1"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "Variable"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "Variable"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta1_power"
  input: "save/RestoreV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_2/tensor_names"
  input: "save/RestoreV2_2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "beta2_power"
  input: "save/RestoreV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_3/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_3"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_3/tensor_names"
  input: "save/RestoreV2_3/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2_3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_4/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_4"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_4/tensor_names"
  input: "save/RestoreV2_4/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
  input: "save/RestoreV2_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_5/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_5"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_5/tensor_names"
  input: "save/RestoreV2_5/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "save/RestoreV2_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_6/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_6"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_6/tensor_names"
  input: "save/RestoreV2_6/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_7/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_7"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_7/tensor_names"
  input: "save/RestoreV2_7/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "save/RestoreV2_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_8/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_8/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_8"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_8/tensor_names"
  input: "save/RestoreV2_8/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "save/RestoreV2_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_9/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_9/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_9"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_9/tensor_names"
  input: "save/RestoreV2_9/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_10/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_10/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_10"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_10/tensor_names"
  input: "save/RestoreV2_10/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
  input: "save/RestoreV2_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_11/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_11/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_11"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_11/tensor_names"
  input: "save/RestoreV2_11/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "save/RestoreV2_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_12/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_12/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_12"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_12/tensor_names"
  input: "save/RestoreV2_12/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_13/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_13/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_13"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_13/tensor_names"
  input: "save/RestoreV2_13/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "save/RestoreV2_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_14/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_14/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_14"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_14/tensor_names"
  input: "save/RestoreV2_14/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "save/RestoreV2_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_15/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_15/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_15"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_15/tensor_names"
  input: "save/RestoreV2_15/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_16/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_2/syntax_2_biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_16/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_16"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_16/tensor_names"
  input: "save/RestoreV2_16/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "syntax_2/syntax_2_biases"
  input: "save/RestoreV2_16"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_17/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_2/syntax_2_biases/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_17/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_17"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_17/tensor_names"
  input: "save/RestoreV2_17/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "syntax_2/syntax_2_biases/Adam"
  input: "save/RestoreV2_17"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_18/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_2/syntax_2_biases/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_18/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_18"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_18/tensor_names"
  input: "save/RestoreV2_18/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "syntax_2/syntax_2_biases/Adam_1"
  input: "save/RestoreV2_18"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_19/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_2/syntax_2_weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_19/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_19"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_19/tensor_names"
  input: "save/RestoreV2_19/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "syntax_2/syntax_2_weights"
  input: "save/RestoreV2_19"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_20/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_2/syntax_2_weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_20/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_20"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_20/tensor_names"
  input: "save/RestoreV2_20/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "syntax_2/syntax_2_weights/Adam"
  input: "save/RestoreV2_20"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_21/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_2/syntax_2_weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_21/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_21"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_21/tensor_names"
  input: "save/RestoreV2_21/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "syntax_2/syntax_2_weights/Adam_1"
  input: "save/RestoreV2_21"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all/NoOp"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
}
node {
  name: "save/restore_all/NoOp_1"
  op: "NoOp"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_all/NoOp"
  input: "^save/restore_all/NoOp_1"
}
node {
  name: "init/NoOp"
  op: "NoOp"
  input: "^Variable/Assign"
  input: "^syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Assign"
  input: "^syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Assign"
  input: "^syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Assign"
  input: "^syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Assign"
  input: "^global_step/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam/Assign"
  input: "^syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1/Assign"
  input: "^syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam/Assign"
  input: "^syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1/Assign"
  input: "^syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam/Assign"
  input: "^syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1/Assign"
  input: "^syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam/Assign"
  input: "^syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1/Assign"
}
node {
  name: "init/NoOp_1"
  op: "NoOp"
  input: "^syntax_2/syntax_2_weights/Assign"
  input: "^syntax_2/syntax_2_biases/Assign"
  input: "^syntax_2/syntax_2_weights/Adam/Assign"
  input: "^syntax_2/syntax_2_weights/Adam_1/Assign"
  input: "^syntax_2/syntax_2_biases/Adam/Assign"
  input: "^syntax_2/syntax_2_biases/Adam_1/Assign"
  device: "/device:CPU:0"
}
node {
  name: "init"
  op: "NoOp"
  input: "^init/NoOp"
  input: "^init/NoOp_1"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "syntax_2/syntax_2_weights"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "syntax_2/syntax_2_biases"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "syntax_2/syntax_2_weights/Adam"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "syntax_2/syntax_2_weights/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "syntax_2/syntax_2_biases/Adam"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "syntax_2/syntax_2_biases/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 22
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "Variable"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "syntax_2/syntax_2_weights"
        string_val: "syntax_2/syntax_2_biases"
        string_val: "global_step"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
        string_val: "syntax_2/syntax_2_weights/Adam"
        string_val: "syntax_2/syntax_2_weights/Adam_1"
        string_val: "syntax_2/syntax_2_biases/Adam"
        string_val: "syntax_2/syntax_2_biases/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_0"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/Gather"
  input: "report_uninitialized_resources/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "syntax_2/syntax_2_weights"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "syntax_2/syntax_2_biases"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "syntax_2/syntax_2_weights/Adam"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "syntax_2/syntax_2_weights/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "syntax_2/syntax_2_biases/Adam"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "syntax_2/syntax_2_biases/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 22
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "Variable"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "syntax_2/syntax_2_weights"
        string_val: "syntax_2/syntax_2_biases"
        string_val: "global_step"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
        string_val: "syntax_2/syntax_2_weights/Adam"
        string_val: "syntax_2/syntax_2_weights/Adam_1"
        string_val: "syntax_2/syntax_2_biases/Adam"
        string_val: "syntax_2/syntax_2_biases/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_0"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
  input: "^string_to_index/hash_table/table_init"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "input_producer/fraction_of_32_full"
  input: "shuffle_batch/fraction_over_9_of_9321_full"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save_1/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_b06e5423547d4472840382a776f9e4b6/part"
      }
    }
  }
}
node {
  name: "save_1/StringJoin"
  op: "StringJoin"
  input: "save_1/Const"
  input: "save_1/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save_1/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "save_1/ShardedFilename/shard"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save_1/ShardedFilename"
  op: "ShardedFilename"
  input: "save_1/StringJoin"
  input: "save_1/ShardedFilename/shard"
  input: "save_1/num_shards"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save_1/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 16
          }
        }
        string_val: "Variable"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "global_step"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save_1/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 16
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/SaveV2"
  op: "SaveV2"
  input: "save_1/ShardedFilename"
  input: "save_1/SaveV2/tensor_names"
  input: "save_1/SaveV2/shape_and_slices"
  input: "Variable"
  input: "beta1_power"
  input: "beta2_power"
  input: "global_step"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/control_dependency"
  op: "Identity"
  input: "save_1/ShardedFilename"
  input: "^save_1/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save_1/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save_1/ShardedFilename_1/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save_1/ShardedFilename_1"
  op: "ShardedFilename"
  input: "save_1/StringJoin"
  input: "save_1/ShardedFilename_1/shard"
  input: "save_1/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save_1/SaveV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "syntax_2/syntax_2_biases"
        string_val: "syntax_2/syntax_2_biases/Adam"
        string_val: "syntax_2/syntax_2_biases/Adam_1"
        string_val: "syntax_2/syntax_2_weights"
        string_val: "syntax_2/syntax_2_weights/Adam"
        string_val: "syntax_2/syntax_2_weights/Adam_1"
      }
    }
  }
}
node {
  name: "save_1/SaveV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/SaveV2_1"
  op: "SaveV2"
  input: "save_1/ShardedFilename_1"
  input: "save_1/SaveV2_1/tensor_names"
  input: "save_1/SaveV2_1/shape_and_slices"
  input: "syntax_2/syntax_2_biases"
  input: "syntax_2/syntax_2_biases/Adam"
  input: "syntax_2/syntax_2_biases/Adam_1"
  input: "syntax_2/syntax_2_weights"
  input: "syntax_2/syntax_2_weights/Adam"
  input: "syntax_2/syntax_2_weights/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/control_dependency_1"
  op: "Identity"
  input: "save_1/ShardedFilename_1"
  input: "^save_1/SaveV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save_1/ShardedFilename_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save_1/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save_1/ShardedFilename"
  input: "save_1/ShardedFilename_1"
  input: "^save_1/control_dependency"
  input: "^save_1/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save_1/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save_1/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save_1/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Identity"
  op: "Identity"
  input: "save_1/Const"
  input: "^save_1/control_dependency"
  input: "^save_1/control_dependency_1"
  input: "^save_1/MergeV2Checkpoints"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save_1/RestoreV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "Variable"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2/tensor_names"
  input: "save_1/RestoreV2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign"
  op: "Assign"
  input: "Variable"
  input: "save_1/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 64
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_1/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "beta1_power"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_1/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_1"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_1/tensor_names"
  input: "save_1/RestoreV2_1/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_1"
  op: "Assign"
  input: "beta1_power"
  input: "save_1/RestoreV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "beta2_power"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_2"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_2/tensor_names"
  input: "save_1/RestoreV2_2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_2"
  op: "Assign"
  input: "beta2_power"
  input: "save_1/RestoreV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_3/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_3/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_3"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_3/tensor_names"
  input: "save_1/RestoreV2_3/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save_1/Assign_3"
  op: "Assign"
  input: "global_step"
  input: "save_1/RestoreV2_3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_4/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_4/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_4"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_4/tensor_names"
  input: "save_1/RestoreV2_4/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_4"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
  input: "save_1/RestoreV2_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_5/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_5/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_5"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_5/tensor_names"
  input: "save_1/RestoreV2_5/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_5"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam"
  input: "save_1/RestoreV2_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_6/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_6/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_6"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_6/tensor_names"
  input: "save_1/RestoreV2_6/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_6"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/bias/Adam_1"
  input: "save_1/RestoreV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_7/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_7/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_7"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_7/tensor_names"
  input: "save_1/RestoreV2_7/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_7"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "save_1/RestoreV2_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_8/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_8/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_8"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_8/tensor_names"
  input: "save_1/RestoreV2_8/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_8"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam"
  input: "save_1/RestoreV2_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_9/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_9/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_9"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_9/tensor_names"
  input: "save_1/RestoreV2_9/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_9"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/bw/lstm_cell/kernel/Adam_1"
  input: "save_1/RestoreV2_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_10/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_10/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_10"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_10/tensor_names"
  input: "save_1/RestoreV2_10/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_10"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
  input: "save_1/RestoreV2_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_11/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_11/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_11"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_11/tensor_names"
  input: "save_1/RestoreV2_11/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_11"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam"
  input: "save_1/RestoreV2_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_12/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_12/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_12"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_12/tensor_names"
  input: "save_1/RestoreV2_12/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_12"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/bias/Adam_1"
  input: "save_1/RestoreV2_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_13/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_13/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_13"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_13/tensor_names"
  input: "save_1/RestoreV2_13/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_13"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "save_1/RestoreV2_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_14/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_14/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_14"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_14/tensor_names"
  input: "save_1/RestoreV2_14/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_14"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam"
  input: "save_1/RestoreV2_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_15/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_15/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_15"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_15/tensor_names"
  input: "save_1/RestoreV2_15/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_15"
  op: "Assign"
  input: "syntax_1/bidirectional_rnn/fw/lstm_cell/kernel/Adam_1"
  input: "save_1/RestoreV2_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_1/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 800
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/restore_shard"
  op: "NoOp"
  input: "^save_1/Assign"
  input: "^save_1/Assign_1"
  input: "^save_1/Assign_2"
  input: "^save_1/Assign_3"
  input: "^save_1/Assign_4"
  input: "^save_1/Assign_5"
  input: "^save_1/Assign_6"
  input: "^save_1/Assign_7"
  input: "^save_1/Assign_8"
  input: "^save_1/Assign_9"
  input: "^save_1/Assign_10"
  input: "^save_1/Assign_11"
  input: "^save_1/Assign_12"
  input: "^save_1/Assign_13"
  input: "^save_1/Assign_14"
  input: "^save_1/Assign_15"
}
node {
  name: "save_1/RestoreV2_16/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_2/syntax_2_biases"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_16/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_16"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_16/tensor_names"
  input: "save_1/RestoreV2_16/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_16"
  op: "Assign"
  input: "syntax_2/syntax_2_biases"
  input: "save_1/RestoreV2_16"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_17/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_2/syntax_2_biases/Adam"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_17/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_17"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_17/tensor_names"
  input: "save_1/RestoreV2_17/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_17"
  op: "Assign"
  input: "syntax_2/syntax_2_biases/Adam"
  input: "save_1/RestoreV2_17"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_18/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_2/syntax_2_biases/Adam_1"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_18/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_18"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_18/tensor_names"
  input: "save_1/RestoreV2_18/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_18"
  op: "Assign"
  input: "syntax_2/syntax_2_biases/Adam_1"
  input: "save_1/RestoreV2_18"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_19/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_2/syntax_2_weights"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_19/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_19"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_19/tensor_names"
  input: "save_1/RestoreV2_19/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_19"
  op: "Assign"
  input: "syntax_2/syntax_2_weights"
  input: "save_1/RestoreV2_19"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_20/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_2/syntax_2_weights/Adam"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_20/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_20"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_20/tensor_names"
  input: "save_1/RestoreV2_20/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_20"
  op: "Assign"
  input: "syntax_2/syntax_2_weights/Adam"
  input: "save_1/RestoreV2_20"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/RestoreV2_21/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "syntax_2/syntax_2_weights/Adam_1"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_21/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_21"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2_21/tensor_names"
  input: "save_1/RestoreV2_21/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save_1/Assign_21"
  op: "Assign"
  input: "syntax_2/syntax_2_weights/Adam_1"
  input: "save_1/RestoreV2_21"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@syntax_2/syntax_2_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 400
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/restore_shard_1"
  op: "NoOp"
  input: "^save_1/Assign_16"
  input: "^save_1/Assign_17"
  input: "^save_1/Assign_18"
  input: "^save_1/Assign_19"
  input: "^save_1/Assign_20"
  input: "^save_1/Assign_21"
  device: "/device:CPU:0"
}
node {
  name: "save_1/restore_all/NoOp"
  op: "NoOp"
  input: "^save_1/restore_shard"
}
node {
  name: "save_1/restore_all/NoOp_1"
  op: "NoOp"
  input: "^save_1/restore_shard_1"
  device: "/device:CPU:0"
}
node {
  name: "save_1/restore_all"
  op: "NoOp"
  input: "^save_1/restore_all/NoOp"
  input: "^save_1/restore_all/NoOp_1"
}
versions {
  producer: 24
}
